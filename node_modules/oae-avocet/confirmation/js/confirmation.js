/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.fileupload', 'jquery.iframe-transport'], function($, oae) {

    // The key that the submitpublication widget stores the most recently submitted ticket under in the sessionStorage.
    var TICKET_SESSION_KEY = 'oa.submitpublication.mostRecentTicketSubmission';

    return function(uid) {
        // The widget container
        var $rootel = $('#' + uid);
        var $successTemplate = $('.confirmation-success-template', $rootel);
        var $successContainer = $('.confirmation-success-container', $rootel);

        /**
         * Render the confirmation template with the specific ticket object.
         *
         * @param   {Object}    ticket  The Ticket object to render a confirmation for.
         */
        var renderConfirmationMessage = function(ticket) {
            var context = _.extend({
                'addendumUrl': oae.api.config.getValue('oae-tickets', 'general', 'addendumUrl')
            }, ticket);

            oae.api.util.template().render($successTemplate, context, $successContainer);
            $successContainer.show();
        }

        // If a ticket was just created there'll be a record of it in session storage.
        // If there is one we'll display a message confirming that the ticket's been created.
        var ticketJSON = sessionStorage.getItem(TICKET_SESSION_KEY);
        try {
            var ticket = JSON.parse(ticketJSON || '');
            renderConfirmationMessage(ticket);
            // Remove the ticket so that we won't confirm again
            sessionStorage.removeItem(TICKET_SESSION_KEY);
        } catch(e) {
            if (!(e instanceof SyntaxError)) {
                throw e;
            }
            // No session key set (or possibly invalid JSON), ignore
        }
    };
});
