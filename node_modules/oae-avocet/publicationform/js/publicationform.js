/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core', 'jquery.typeahead', 'bootstrap.datepicker', '/shared/vendor/js/l10n/cultures/globalize.culture.en-GB.js'], function($, _, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        /**
         * Check whether or not the publication has external funders
         *
         * @return {Boolean} Whether or not the publication has external funders
         */
        var hasExternalFunders = function() {
            return $('[name="hasExternalFunders"]:checked', $rootel).val() === 'yes';
        };

        /**
         * Check whether or not the author is from the University of Cambridge
         *
         * @return {Boolean} Whether or not the author is from the University of Cambridge
         */
        var isUcamAuthor = function() {
            return $('[name="ucamAuthor"]:checked', $rootel).val() === 'yes';
        };

        /**
         * Check whether the user has marked the acceptance date as unknown
         *
         * @return {Boolean} Whether or not the users marked acceptance date as unknown
         */
        var knowsAcceptanceDate = function() {
            return !$('[name="acceptanceDateUnknown"]', $rootel).is(':checked');
        };

        /**
         * Get a jQuery selection of form fields by name and/or value
         *
         * @param  {String}    name       The name of the form fields to return
         * @param  {String}    value      The value of the form fields to return
         * @return {jQuery}               A jQuery selection of the found form fields
         */
        var getFields = function(name, value) {
            var selector = '';
            if (name) {
                selector += '[name="' + name + '"]';
            }
            if (value) {
                selector += '[value="' + value + '"]';
            }
            return $(selector, $rootel);
        };

        /**
         * Return minimally required form data for the form template to work.
         * The data is extended with any custom values provided in an optional
         * options object.
         *
         * @param  {Object}    options    The values to extend the minimum form data with
         * @return {Object}               The minumum form template data extended with the supplied options object
         */
        var getMinimumFormTemplateData = function(options) {
            return _.extend({
                'prefill': {
                    'email': oae.data.me.email,
                    'funders': []
                },
                'disabled': false
            }, options);
        };

        /**
         * Trigger the jquery.validator plugin to validate the funders section of the form
         */
        var validateFunders = function() {
            getFields('funders').first().valid();
        };

        /**
         * Trigger the jquery.validator plugin to validate the acceptanceDate section of the form
         */
        var validateAcceptanceDate = function() {
            $('#oa-publicationform-input-acceptancedate').valid();
        };

        /**
         * Unbinds events specific to this instance of the form before re-initialising it
         */
        var resetForm = function() {
            // Remove the datepicker event listeners
            removeDatePicker();
            // Remove typeahead functionality from the journal and department input fields
            $('.tt-input', $rootel).typeahead('destroy');
            // Remove the tooltip functionality from the abbr elements
            $('abbr[data-toggle="tooltip"]', $rootel).tooltip('destroy');
            // Remove the popover functionality
            $('[data-toggle="popover"]', $rootel).popover('destroy');
            // Remove listeners applied by the jQuery.validate plugin
            $('form', $rootel).off();
            initForm();
        };

        /**
         * Initialise typeahead functionality on a given element, will fetch suggestions from the supplied endpoint with 'q' and 'limit' query parameters.
         *
         * @param  {jQuery}   $el   The element the typeahead functionality should be applied to
         * @param  {String}   name  The name which should be supplied to the typeahead plugin
         * @param  {String}   url   The endpoint to fetch results from
         */
        var initTypeahead = function($el, name, url) {
            $el.typeahead({
                'hint': true,
                'highlight': true
            }, {
                'name': name,
                'displayKey': 'displayName',
                'source': function(query, callback) {
                    $.ajax({
                        'url': url,
                        'data': {
                            'limit': 10,
                            'q': query
                        },
                        'success': function(data) {
                            callback(data.results);
                        }
                    });
                }
            });
        };

        /**
         * Initialise input validation on the form.
         */
        var initFormValidation = function() {
            // Initialise validation on the form
            oae.api.util.validation().validate($('form', $rootel), {
                'errorClass': 'help-block',
                // Set ignore to null so the plugin doesn't ignore hidden form fields
                'ignore': null,
                'rules': {
                    'acceptanceDate': {
                        'required': {
                            'depends': knowsAcceptanceDate
                        },
                        'oa-dateformat': {
                            'depends': knowsAcceptanceDate
                        },
                        'oa-datemax': {
                            'depends': knowsAcceptanceDate
                        }
                    },
                    'funders': {
                        'required': {
                            'depends': function() {
                                if (hasExternalFunders()) {
                                    return $('#oa-publicationform-input-other-funders', $rootel).val().trim() === '';
                                }
                                return false;
                            }
                        }
                    },
                    'institution': {
                        'required': {
                            'depends': function() {
                                return !isUcamAuthor();
                            }
                        }
                    }
                },
                'submitHandler': function(form) {
                    var publicationData = formDataToPublicationData($(form).serializeObject());
                    // Dispatch an event if the form is submitted
                    $(document).trigger('oa.publicationform.submit', publicationData);
                },
                'invalidHandler': oae.api.analytics.jqueryValidateInvalidHandler
            });
        };

        /**
         * Maps the form data to the object format needed to create a publication
         *
         * @param  {Object}   data  The form data object
         * @return {Object}         The mapped object
         */
        var formDataToPublicationData = function(data) {
            return {
                'displayName': $.trim(data.title),
                'department': $.trim(data.department),
                'authors': (function() {
                    var authors = [];
                    _.each(data.authors.split(','), function(author) {
                        author = $.trim(author);
                        if (author.length) {
                            authors.push(author);
                        }
                    });
                    return authors;
                }()),
                'institution': data.ucamAuthor === 'yes' ? 'University of Cambridge' : $.trim(data.institution),
                'journalName': $.trim(data.journal),
                'acceptanceDate': (function() {
                    // Convert the acceptance date to a Date object
                    var dateObj = Globalize.parseDate(data['acceptanceDate'], 'dd/MM/yyyy');
                    // 'acceptanceDate' is currently in local time. We need to send the UTC equivalent of the local date @ midnight (as a millisecond timestamp).
                    return dateObj ? Date.UTC(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate()) : null;
                }()),
                'funders': data.hasExternalFunders === 'no' ? [] : (function() {
                    var funders = [];
                    if (data.funders) {
                        funders = funders.concat(data.funders);
                    }
                    if (data.otherFunders) {
                        // Add other funders to the funders array prepended with the 'other:' string
                        _.each(data.otherFunders.split(','), function(otherFunder) {
                            otherFunder = $.trim(otherFunder);
                            if (otherFunder.length) {
                                funders.push('other:' + otherFunder);
                            }
                        });
                    }
                    return funders;
                }()),
                'comments': $.trim(data.comment),
                'contactEmail': $.trim(data.email),

                // Auto-generated values. These are required by the tickets API
                'date': Date.now(),
                'publicationType': 'other',
                'publisher': ' '
            };
        };

        /**
         * Map a publication to the publicationform field structure.
         *
         * @param  {Object}  publication  A publication returned from the API
         * @return {Object}               Reorganized publication data
         */
        var publicationDataToFormData = function(publication) {
            // Get the funders from the publication object exluding any custom ones (using format 'other:funderName')
            var funders = _.filter(publication.funders, function(funder) {
                return !/^other:/.test(funder);
            });
            // Get the custom funders from the publication object
            var otherFunders = _.difference(publication.funders, funders);
            return {
                'title': publication.displayName,
                'department': publication.department,
                'authors': _.map(publication.authors, function(author) {
                    return author.displayName || author;
                }).join(', '),
                'institution': publication.institution,
                'journal': publication.journalName,
                'acceptanceDate': !publication.acceptanceDate ? '' : oae.api.util.utcDateToLocal(publication.acceptanceDate),
                'acceptanceDateUnknown': !publication.acceptanceDate,
                'hasExternalFunders': funders.length || otherFunders.length ? 'yes' : 'no',
                'funders': funders,
                // Map the other funders array to a string e.g. 'funder 1, funder 2'
                'otherFunders': _.map(otherFunders, function(otherFunder) {
                    // Remove the 'other:' part from the string
                    return otherFunder.replace(/^other:/, '');
                }).join(', '),
                'comment': publication.comments,
                'email': publication.contactEmail,
                'ucamAuthor': publication.institution === 'University of Cambridge' ? 'yes' : 'no',
                'terms': true
            };
        };

        /**
         * Render the form template with the supplied data.
         *
         * @param  {Object}  data  The data to use when rendering the form template
         */
        var renderForm = function(data) {
            oae.api.util.template().render($('#oa-publicationform-form-template', $rootel), data, $('#oa-publicationform-form-container', $rootel));
        };

        /**
         * Extend the validator plugin with custom validation functions required
         * for the form validation to work.
         */
        var extendValidator = function() {
            // Adds another method to the validator plugin which checks whether a date is in the dd/mm/yyyy format
            $.validator.addMethod('oa-dateformat', function (value, element) {
                return Globalize.parseDate(value, 'dd/MM/yyyy') !== null;
            }, 'Please enter a correct date');
            // Adds a validator method which checks whether the provided date is in the future
            $.validator.addMethod('oa-datemax', function (value, element) {
                return Globalize.parseDate(value, 'dd/MM/yyyy') <= new Date();
            }, 'Please enter a date which isn\'t in the future');
        };

        /**
         * Bind the required events
         */
        var addBinding = function() {
            // Re-initialise the form when a reset is requested
            $(document).on('oa.publicationform.reset', resetForm);

            // Show/hide the funders checkboxes when external funding radio buttons change
            $rootel.on('change', '[name="hasExternalFunders"]', function() {
                $('#oa-publicationform-funders-container', $rootel).toggle();
            });

            $rootel.on('change', '[name="acceptanceDateUnknown"]', function() {
                var checked = $(this).prop('checked');
                $('#oa-publicationform-input-acceptancedate', $rootel).prop('disabled', checked).val('');
                if (checked) {
                    removeDatePicker();
                } else {
                    initDatePicker();
                }
            });

            // Toggle the instiution field based on the ucamAuthor radio button selection
            $rootel.on('change', '[name="ucamAuthor"]', function() {
                // Empty the fields first
                var $institutionField = $('[name="institution"]', $rootel).val('');
                // Toggle the institution field, removing any active error states.
                $institutionField.parents('.form-group').toggle(!isUcamAuthor()).removeClass('has-error').find('.oae-error').remove();
            });

            // Show/hide the other-funders field when the "Other" funder box is checked
            $rootel.on('change', '[name="funders"][value="other"]', function() {
                var $otherFunders = $('#oa-publicationform-input-other-funders', $rootel);
                if ($(this).is(':checked')) {
                    $otherFunders.show().focus();
                } else {
                    $otherFunders.hide();
                }
            });

            if (!widgetData || !widgetData.disabled) {
                // Revalidate the funders form section when the 'other funder'
                // input value changes. This custom validation is required
                // because the 'other funder' form element isn't considered part
                // of the funders field by default which is why its validation
                // isn't automatically triggered.
                $rootel.on('change', '#oa-publicationform-funders-container', validateFunders);
                // Same for the acceptance date
                $rootel.on('change', '#form-group-acceptancedate', validateAcceptanceDate);
            }
        };

        /**
         * Initialise the form on the page
         */
        var initForm = function() {
            var templateData = {};
            if (widgetData) {
                templateData.disabled = widgetData.disabled;
                if (widgetData.publication) {
                    templateData.prefill = publicationDataToFormData(widgetData.publication);
                }
            }
            // Render the form with any data that should be prefilled
            templateData = getMinimumFormTemplateData(templateData);
            renderForm(templateData);
            oae.api.widget.loadWidgets($rootel);

            // Activate the tooltips on the funder <abbr> elements
            // These are used to explain the funder abbreviations
            $('abbr[data-toggle="tooltip"]', $rootel).tooltip({placement: 'right'});

            // Activate popovers
            $('[data-toggle="popover"]', $rootel).popover({
                'placement': 'right'
            });

            // Only initialise the interactive elements of the form if the form
            // isn't disabled.
            if (!widgetData || !widgetData.disabled) {
                // Initialise typeahead functionality on the journal and department fields
                initTypeahead($('#oa-publicationform-input-journal', $rootel), 'journals', '/api/search/journals');
                initTypeahead($('#oa-publicationform-input-department', $rootel), 'departments', '/api/search/departments');

                // Custom datepicker 'enter' event
                $('.input-group.date input', $rootel).on('keyup keydown', function(ev) {
                    if (ev.keyCode === 13) {
                        // Hide the datepicker element (also sets the selected date as the value for the input field)
                        $('.input-group.date', $rootel).datepicker('hide');
                        // Prevent the datepicker event handler to be triggered
                        ev.stopImmediatePropagation();
                        ev.preventDefault();
                    }
                });

                if (!templateData.disabled && (_.isUndefined(templateData.prefill.acceptanceDate) || templateData.prefill.acceptanceDate !== '')) {
                    initDatePicker();
                }

                // Initialise form validation
                initFormValidation();
            }
        };

        /**
         * Initialise the datepicker component
         */
        var initDatePicker = function() {
            $('.input-group.date', $rootel).datepicker({
                'format': 'dd/mm/yyyy',
                'keyboardNavigation': false
            });
        };

        /**
         * Remove the datepicker component
         */
        var removeDatePicker = function() {
            $('.input-group.date', $rootel).datepicker('remove');
        };

        /**
         * Use analytics to track the opening of the various modals in the form.
         */
        var trackModals = function() {
            $rootel.on('click', '[data-toggle="modal"]', function(ev) {
                // Use the ID of the modal as the name
                var name = $(ev.target).data('target');
                oae.api.analytics.trackModalOpen(name);
            });
        };

        extendValidator();
        initForm();
        addBinding();
        trackModals();
    };
});
