/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.typeahead'], function($, oae) {

    return function(uid, showSettings, widgetData) {
        var $rootel = $('#' + uid);

        /**
         * Initialises typeahead functionality on a given element, will fetch suggestions from the supplied endpoint with 'q' and 'limit' query parameters.
         *
         * @param  {jQuery}   $el   The element the typeahead functionality should be applied to
         * @param  {String}   name  The name which should be supplied to the typeahead plugin
         * @param  {String}   url   The endpoint to fetch results from
         */
        var initTypeahead = function($el, name, url) {
            $el.typeahead({
                'hint': true,
                'highlight': true
            }, {
                'name': name,
                'displayKey': 'displayName',
                'source': function(query, callback) {
                    $.ajax({
                        'url': url,
                        'data': {
                            'limit': 10,
                            'q': query
                        },
                        'success': function(data) {
                            callback(data.results);
                        }
                    });
                }
            });
        };

        /**
         * Initialises input validation on the form.
         */
        var initFormValidation = function() {
            // Revalidate the funders form section when the other-funders
            // value changes. This is required because other-funders isn't
            // considered part of the funders field by default.
            $('#input-other-funders', $rootel).on('change', function() {
                $('input[name=funders]', $rootel).first().valid();
            });

            // Add a custom validator method to validate the funders component.
            // Requires other-funders to have a value when the Other funder is checked
            $.validator.addMethod('oa-validate-other-funders', function(value, element) {
                if ($('input[name=funders][value=other]', $rootel).is(':checked')) {
                    return $('#input-other-funders', $rootel).val().trim() !== '';
                }
                return true;
            }, 'Enter your funder\'s name');

            // Initialise validation on the form
            oae.api.util.validation().validate($('form', $rootel), {
                'errorClass': 'help-block',
                'rules': {
                    'funders': {
                        'required': true,
                        'oa-validate-other-funders': true
                    }
                },
                'submitHandler': function(form) {
                    // Dispatch an event if the form is submitted
                    $(document).trigger('oa.publicationform.submit', $(form).serializeObject());
                }
            });
        };

        /**
         * Initialises the form
         */
        var initForm = function() {
            // Activate the tooltips on the funder <abbr>s.
            // These are used to explain the funder abbreviations
            $('abbr[data-toggle="tooltip"]', $rootel).tooltip({placement: 'right'});

            // Prefill the email field
            $('#input-email', $rootel).val(oae.data.me.email);

            // Show/hide the other-funders field when the "Other" funder box is checked
            $rootel.on('change', 'input[name=funders][value=other]', function() {
                if ($(this).is(':checked')) {
                    $('#input-other-funders', $rootel).show();
                } else {
                    $('#input-other-funders', $rootel).hide();
                }
            });

            // Clear the comments textarea to avoid placeholder bug
            // @see https://github.com/CUL-DigitalServices/avocet-ui/issues/66
            $('#input-comments', $rootel).val('');

            // Only initialise typeahead and validation functionality if the form isn't disabled
            if (!widgetData || !widgetData.disabled) {
                // Initialise typeahead functionality on the journal and department fields
                initTypeahead($('#input-journal', $rootel), 'journals', '/api/search/journals');
                initTypeahead($('#input-department', $rootel), 'departments', '/api/search/departments');
                initFormValidation();
            } else {
                // Disable the form
                $('input, textarea', $rootel).prop('disabled', true).attr('placeholder', '');
                $('.panel-footer', $rootel).hide();
            }

            if (widgetData) {
                // Prefill the form if a prefill object is provided
                if (widgetData.prefill) {
                    _.each(widgetData.prefill.fields, function(value, name) {
                        $('[name="' + name + '"]', $rootel).val(value).trigger('change');
                    });

                    _.each(widgetData.prefill.checkboxes, function(value, name) {
                        // If the value is passed as an array we assume multiple values are selected
                        if (_.isArray(value)) {
                            _.each(value, function(checkboxValue) {
                                $('[name="' + name + '"][value="' + checkboxValue + '"]').prop('checked', true).trigger('change');
                            });
                        } else {
                            $('[name="' + name + '"]').prop('checked', value).trigger('change');
                        }
                    });
                }
            }
        };

        initForm();
    }
});
