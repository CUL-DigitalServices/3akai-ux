/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core', 'jquery.typeahead', 'bootstrap.datepicker', 'globalize'], function($, _, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        /**
         * Initialise typeahead functionality on a given element, will fetch suggestions from the supplied endpoint with 'q' and 'limit' query parameters.
         *
         * @param  {jQuery}   $el   The element the typeahead functionality should be applied to
         * @param  {String}   name  The name which should be supplied to the typeahead plugin
         * @param  {String}   url   The endpoint to fetch results from
         */
        var initTypeahead = function($el, name, url) {
            $el.typeahead({
                'hint': true,
                'highlight': true
            }, {
                'name': name,
                'displayKey': 'displayName',
                'source': function(query, callback) {
                    $.ajax({
                        'url': url,
                        'data': {
                            'limit': 10,
                            'q': query
                        },
                        'success': function(data) {
                            callback(data.results);
                        }
                    });
                }
            });
        };

        /**
         * Check whether 'hasExternalFunders' has been marked 'yes'
         */
        var hasExternalFunders = function() {
            return $('[name="hasExternalFunders"]:checked', $rootel).val() === 'yes';
        };

        /**
         * Get form fields by name and/or value
         *
         * @param  {String}  name   The name of the form fields to find
         * @param  {String}  value  The value of the form fields to find
         * @return {jQuery}  A jQuery selection
         */
        var getFields = function(name, value) {
            var selector = '';
            if (name) {
                selector += '[name="' + name + '"]';
            }
            if (value) {
                selector += '[value="' + value + '"]';
            }
            return $(selector, $rootel);
        };

        /**
         * Trigger the jquery.validator plugin to validate the funders section of the form
         */
        var validateFunders = function() {
            getFields('funders').first().valid();
        };

        /**
         * Initialise input validation on the form.
         */
        var initFormValidation = function() {
            // Revalidate the funders form section when the other-funders
            // value changes or when has-external-funders changes. This is
            // required because other-funders/hasExternalFunders isn't
            // considered part of the funders field by default.
            $rootel.on('change', '[name="hasExternalFunders"]', validateFunders);
            $rootel.on('keyup', '#oa-publicationform-input-other-funders', validateFunders);

            // Add a custom validator method to validate the funders component.
            // Requires other-funders to have a value when the Other funder is checked
            $.validator.addMethod('oa-validate-other-funders', function(value, element) {
                if (getFields('funders', 'other').is(':checked')) {
                    return $('#oa-publicationform-input-other-funders', $rootel).val().trim() !== '';
                }
                return true;
            }, 'Enter your funder\'s name');

            // Adds another method to the validator plugin which checks whether a date is in the dd/mm/yyyy format
            $.validator.addMethod('oa-validate-date', function (value, element) {
                return Globalize.parseDate(value, 'dd/MM/yyyy') !== null;
            }, 'Please enter a correct date');

            // Initialise validation on the form
            oae.api.util.validation().validate($('form', $rootel), {
                // Set ignore to null so the plugin doesn't ignore visually hidden form fields (the default)
                'ignore': null,
                'errorClass': 'help-block',
                'rules': {
                    'acceptanceDate': {
                        'oa-validate-date': {
                            'depends': function (element) {
                                // Only validate the field if it isn't empty
                                return $(element).val();
                            }
                        }
                    },
                    'funders': {
                        'required': {
                            'depends': hasExternalFunders
                        },
                        'oa-validate-other-funders': {
                            'depends': hasExternalFunders
                        }
                    },
                    'hasExternalFunders': {
                        'required': true
                    }
                },
                'submitHandler': function(form) {
                    var data = $(form).serializeObject();

                    if (data['hasExternalFunders'] === 'no') {
                        data.funders = [];
                    } else {
                        // Ensure data.funders is an Array
                        data.funders = _.isArray(data.funders) ? data.funders : [data.funders];
                        var funders = _.without(data.funders, 'other');
                        var otherFunders = data['other-funders'];
                        // Prepend all other funders with 'other:' and add them to the funders array
                        _.each(otherFunders.split(','), function(otherFunder) {
                            otherFunder = $.trim(otherFunder);
                            if (otherFunder.length) {
                                funders.push('other:' + otherFunder);
                            }
                        });
                        data.funders = funders;
                    }
                    delete data['other-funders'];

                    // Convert the acceptance date to millieseconds
                    var acceptanceDate = Globalize.parseDate(data['acceptanceDate'], 'dd/MM/yyyy');
                    if (acceptanceDate) {
                        // acceptanceDate is currently in local time. We need to send the UTC equivalent of the local date @ midnight (as a millisecond timestamp).
                        data['acceptanceDate'] = Date.UTC(acceptanceDate.getFullYear(), acceptanceDate.getMonth(), acceptanceDate.getDate());
                    }

                    // Dispatch an event if the form is submitted
                    $(document).trigger('oa.publicationform.submit', data);
                }
            });
        };

        /**
         * Prefill the form with data
         *
         * @param  {Object}  prefillData  An object specifying the form fields and their values
         */
        var prefillForm = function(prefillData) {
            _.each(prefillData.fields, function(fieldValue, fieldName) {
                getFields(fieldName).val(fieldValue);
            });

            _.each(prefillData.radioButtons, function(checkedValue, radioName) {
                getFields(radioName).prop('checked', false);
                getFields(radioName, checkedValue).prop('checked', true);
            });

            _.each(prefillData.checkboxes, function(checked, checkboxName) {
                // If checked is passed as an array we assume multiple values are selected for the checkboxName
                if (_.isArray(checked)) {
                    // Select the checkboxes by name and value and mark them as checked
                    _.each(checked, function(checkboxValue) {
                        getFields(checkboxName, checkboxValue).prop('checked', true);
                    });
                } else {
                    // Checked represents whether the checkbox is checked or not
                    getFields(checkboxName).prop('checked', checked);
                }
            });

            if (!hasExternalFunders()) {
                $('#oa-publicationform-funders-container').hide();
            }

            if (prefillData.fields['other-funders']) {
                $('#oa-publicationform-input-other-funders', $rootel).show();
            }
        };

        /**
         * Bind the required change events to the form elements
         */
        var bindEvents = function() {
            // Show/hide the funders checkboxes when external funding radio buttons change
            $rootel.on('change', '[name="hasExternalFunders"]', function() {
                var $fundersContainer = $('#oa-publicationform-funders-container');
                if (hasExternalFunders()) {
                    $fundersContainer.show();
                } else {
                    $fundersContainer.hide();
                }
            });

            // Show/hide the other-funders field when the "Other" funder box is checked
            $rootel.on('change', '[name="funders"][value="other"]', function() {
                var $otherFunders = $('#oa-publicationform-input-other-funders', $rootel);
                if ($(this).is(':checked')) {
                    $otherFunders.show().focus();
                } else {
                    $otherFunders.hide();
                }
            });
        };

        /**
         * Initialise the form
         */
        var initForm = function() {
            // Activate the tooltips on the funder <abbr>s.
            // These are used to explain the funder abbreviations
            $('abbr[data-toggle="tooltip"]', $rootel).tooltip({placement: 'right'});

            // Prefill the email field
            $('#oa-publicationform-input-email', $rootel).val(oae.data.me.email);

            // Clear the comments textarea to avoid placeholder bug
            // @see https://github.com/CUL-DigitalServices/avocet-ui/issues/66
            $('#oa-publicationform-input-comments', $rootel).val('');

            // Prefill the form if a prefill object is provided
            if (widgetData && widgetData.prefill) {
                prefillForm(widgetData.prefill);
            }

            // Only initialise typeahead and validation functionality if the form isn't disabled
            if (!widgetData || !widgetData.disabled) {
                // Initialise typeahead functionality on the journal and department fields
                initTypeahead($('#oa-publicationform-input-journal', $rootel), 'journals', '/api/search/journals');
                initTypeahead($('#oa-publicationform-input-department', $rootel), 'departments', '/api/search/departments');

                // Custom datepicker 'enter' event
                $('.input-group.date', $rootel).find('input').on('keydown keyup', function(e) {
                    if (e.keyCode === 13) {
                        // Prevent the datepicker event handler to be triggered
                        e.stopImmediatePropagation();
                        // Hide the datepicker element (also sets the selected date as the value for the input field)
                        $('.input-group.date', $rootel).datepicker('hide');
                        return false;
                    }
                });

                // Initialise the datepicker
                $('.input-group.date', $rootel).datepicker({
                    'format': 'dd/mm/yyyy',
                    'keyboardNavigation': false
                });

                // Initialise form validation
                initFormValidation();
                // Bind form change events
                bindEvents();
            } else {
                // Disable the form
                $('input, textarea', $rootel).prop('disabled', true).attr('placeholder', '');
                $('[type="submit"]', $rootel).parent().hide();
            }
        };

        initForm();
    };
});
