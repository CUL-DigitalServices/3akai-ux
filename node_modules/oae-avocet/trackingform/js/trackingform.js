/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'bootstrap.datepicker', '/shared/vendor/js/l10n/cultures/globalize.culture.en-GB.js'], function($, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        /**
         * Initialise the jQuery.validate plugin on the form element
         */
        var initFormValidation = function() {
            var $form = $('form', $rootel);
            oae.api.util.validation().validate($form, {
                'errorClass': 'help-block',
                'submitHandler': function() {
                    var trackingData = formDataToTrackingData($form.serializeObject());
                    // Dispatch an event if the form is submitted
                    $(document).trigger('oa.trackingform.submit', trackingData);
                }
            });
        };

        /**
         * Pivots data entered in the form to ticket
         */
        var formDataToTrackingData = function(formData) {
            var underEmbargo = formData.underEmbargo === 'on';
            var embargoDate = null;
            if (underEmbargo) {
                // Convert the acceptance date to a Date object
                var dateObj = Globalize.parseDate(formData['embargoDate'], 'dd/MM/yyyy');
                // 'acceptanceDate' is currently in local time. We need to send the UTC equivalent of the local date @ midnight (as a millisecond timestamp).
                embargoDate = dateObj ? Date.UTC(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate()) : null;
            }

            return {
                'underEmbargo': underEmbargo,
                'embargoDate': embargoDate
            };
        };

        var trackingDataToFormData = function(trackingData) {
            return {
                'underEmbargo': trackingData.underEmbargo,
                'embargoDate': trackingData.embargoDate ? oae.api.util.utcDateToLocal(trackingData.embargoDate) : ''
            };
        };

        /**
         * Bind the necessary event listeners
         */
        var addBinding = function() {
            $rootel.on('change', '[name="underEmbargo"]', function() {
                $('.oa-input-embargo-date').toggle($(this).prop('checked'));
            });
        };

        /**
         * Render the tracking form
         */
        var renderTrackingForm = function(data) {
            oae.api.util.template().render($('#oa-trackingform-template', $rootel), data, $('#oa-trackingform-container', $rootel));
        };

        /**
         * Execute the form initialization tasks
         */
        var initForm = function() {
            renderTrackingForm({
                'prefill': trackingDataToFormData(widgetData.publication)
            });

            $('.input-group.date', $rootel).datepicker({
                'format': 'dd/mm/yyyy',
                'keyboardNavigation': false
            });

            initFormValidation();
        };

        initForm();
        addBinding();
    };

});
