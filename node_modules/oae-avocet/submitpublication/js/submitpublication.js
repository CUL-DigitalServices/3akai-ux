/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.fileupload', 'jquery.iframe-transport'], function($, oae) {

    return function(uid) {
        var $rootel = $('#' + uid);

        var $upload = $('#oa-submitpublication-upload', $rootel);
        var $form = $('#oa-submitpublication-form', $rootel);
        var $progress = $('#oa-submitpublication-upload-progress-container', $rootel);
        var $success = $('#oa-submitpublication-success-container', $rootel);
        var $uploadError = $('#oa-submitpublication-upload-error-container', $rootel);

        // This variable will hold the file which the user selects to upload
        var selectedFile;
        // The configured default for the visibility of files
        var visibility = oae.api.config.getValue('oae-content', 'visibility', 'files');

        /////////////////////////
        //     File upload     //
        /////////////////////////

        /**
         * Renders and shows an error in the upload form.
         *
         * @param  {String}    message    The error message to be displayed
         */
        var showFileUploadError = function(message) {
            var messages = {
                'default': 'There was an error uploading your file, please try again later.',
                'emptyFile': 'The selected file seems to be empty, please make sure you selected the correct file.',
                'multipleFiles': 'You can only upload one file at a time.'
            };
            // Render the error message, display the default message if none is provided
            oae.api.util.template().render($('#oa-submitpublication-upload-error-template', $rootel), {
                'errorMessage': messages[message] || messages.default
            }, $uploadError);
            $uploadError.show();
        };

        /**
         * Resets the upload form to be empty.
         */
        var resetFileUpload = function() {
            $('form', $upload)[0].reset();
        };

        var initFileupload = function() {
            $upload.fileupload({
                'add': function(event, data) {
                    $uploadError.hide();
                    var addedFile = data.files[0];

                    if (addedFile.size === 0) {
                        showFileUploadError('emptyFile');
                        resetFileUpload();
                    } else {
                        // Cache the selected file
                        selectedFile = data.files[0];
                        renderFileData();
                        // Show the form
                        $upload.hide();
                        $success.hide();
                        $form.show();
                        $(document).trigger('oa.submitpublication.start');
                    }
                },
                'drop': function(event, data) {
                    // Show an error when the user attempts to upload multiple files.
                    if (data.files.length > 1) {
                        showFileUploadError('multipleFiles');
                        return false;
                    }
                },
                'dropZone': $upload,
                'fileInput': $('.js-input-upload', $rootel),
                'forceIframeTransport': !$.support.xhrFileUpload && !$.support.xhrFormDataFileUpload,
                'replaceFileInput': false,
                'progress': function(data) {
                    var percentage = data.loaded / data.total * 100;
                    var totalSize = $.fn.fileSize(data.total);
                    var doneSize = $.fn.fileSize(data.loaded);
                    // Update the upload progress bar
                    var $progressBar = $('.oa-submitpublication-upload-progress-bar', $rootel).width(percentage + '%').attr('aria-valuenow', percentage);
                    $('span', $progressBar).text(percentage + '% Complete');
                    // Update the progress text (e.g. '1.2 MB of 5 MB')
                    $('.oa-submitpublication-upload-progress-size').text(doneSize + ' of ' + totalSize);
                },
                'url': '/api/publications/create'
            });
        };

        /**
         * Updates all html containing information about the selected file
         */
        var renderFileData = function() {
            var data = {
                'fileName': selectedFile.name,
                'fileSize': $.fn.fileSize(selectedFile.size)
            };
            oae.api.util.template().render($('#oa-submitpublication-upload-selected-template', $rootel), data, $('#oa-submitpublication-upload-selected-container', $rootel));
            oae.api.util.template().render($('#oa-submitpublication-upload-progress-template', $rootel), data, $progress);
        };


        /////////////////////////
        //    Metadata form    //
        /////////////////////////

        var initForm = function() {
            // Initialise a new multiadd component for the funders field
            var fundersComponent = new MultiAdd($('.js-funders', $form), {
                'placeholder': 'Add funders',
                'title': 'Funders',
                'name': 'funder'
            });

            // Prefill the email field
            $('#input-email', $form).val(oae.data.me.email);

            // Add a custom validator method to validate the funders component
            $.validator.addMethod('oa-validate-funders', function() {
                return fundersComponent.getItems().length;
            }, 'At least one funder is required.');

            // Initialise validation on the form
            oae.api.util.validation().validate($('form', $form), {
                'errorClass': 'help-block',
                'errorPlacement': function(error, field) {
                    $(error).appendTo($(field).parents('.form-group').find('> div'));
                },
                'rules': {
                    'funder': {
                        'oa-validate-funders': true
                    }
                },
                'submitHandler': function(form) {
                    $form.hide();
                    $progress.show();
                    var data = $(form).serializeObject();
                    data.funders = fundersComponent.getItems();
                    oae.api.publication.createPublication(data.title, data.author, data.journal, data.funders, data.email, data.copyright, data.comment, $upload, selectedFile, function(error, data) {
                        if (error) {
                            // Go back to the file selection
                            $progress.hide();
                            $upload.show();
                            // Show there was an error
                            showFileUploadError();
                            // Reset the upload form
                            resetFileUpload();
                            return;
                        }
                        // Reset the form and the fundersComponent
                        $('form', $form)[0].reset();
                        fundersComponent.reset();
                        // Render and display the success message if there was no error
                        oae.api.util.template().render($('#oa-submitpublication-success-template', $rootel), {
                            'publicationTitle': data.publication.displayName
                        }, $success);
                        $progress.hide();
                        $upload.show();
                        $success.show();
                        $(document).trigger('oa.submitpublication.end');
                    });
                }
            });

            // Clear the comments textarea to avoid placeholder bug
            // @see https://github.com/CUL-DigitalServices/avocet-ui/issues/66
            $('#input-comments', $rootel).val('');
        };

        // MultiAdd component
        var MultiAdd = function(element, options) {
            _.bindAll(this);
            this.$el = $(element);
            this.$template = $('#oa-submitpublication-multi-add-template', $rootel);
            this.data = _.extend({}, MultiAdd.DEFAULTS, options);
            this.data.instanceNumber = (MultiAdd.instanceNumber = MultiAdd.instanceNumber + 1 || 0);
            this.render();
            this.bindEvents();
        };

        MultiAdd.DEFAULTS = {
            'error': false,
            'items': [],
            'name': '',
            'placeholder': '',
            'title': ''
        };

        _.extend(MultiAdd.prototype, {
            'addItem': function(name) {
                this.data.items.push(name);
            },
            'bindEvents': function() {
                this.$el.on('click', '.js-btn-add', this.onAddClick);
                this.$el.on('click', '.js-btn-remove', this.onRemoveClick);
            },
            'getItems': function() {
                return this.data.items;
            },
            'onAddClick': function(event) {
                event.preventDefault();
                var value = this.$el.find('[type="text"]').val();
                if (value) {
                    this.addItem(value);
                    this.render();
                }
            },
            'onRemoveClick': function(event) {
                event.preventDefault();
                var index = $(event.currentTarget).data('index');
                this.removeItem(index);
                this.render();
            },
            'removeItem': function(index) {
                this.data.items.splice(index, 1);
            },
            'render': function() {
                oae.api.util.template().render(this.$template, this.data, this.$el);
            },
            'reset': function() {
                this.data.items = [];
                this.render();
            }
        });

        initFileupload();
        initForm();

    };
});
