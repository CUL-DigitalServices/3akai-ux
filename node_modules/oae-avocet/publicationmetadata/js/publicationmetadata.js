/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core', '/shared/vendor/js/l10n/cultures/globalize.culture.en-GB.js'], function($, _, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        var publication = widgetData.publication;
        var publicationSubmitter = widgetData.publicationSubmitter;

        // List the metadata fields for each user role.
        var fieldsPerUserRole = {
            'owner': ['reference', 'accepted', 'uploaded', 'uploadedBy', 'embargo', 'share'],
            'anon': ['author', 'department', 'journal', 'embargo', 'share']
        };

        // List the metadata fields in format:
        // {key: [field label, field icon class, getValue function, custom template selector], key: ...}
        var fields = {
            'author': ['Corresponding author', 'pencil', function(publication) {
                return publication.authors.join(', ');
            }],
            'reference': ['Reference', 'bookmark', function(publication) {
                return publication.ticket.externalId;
            }],
            'uploaded': ['Uploaded', 'upload-alt', function(publication) {
                return oae.api.util.utcDateToLocal(publication.date);
            }],
            'accepted': ['Accepted', 'ok', function(publication) {
                return !publication.acceptanceDate ? 'Unknown' : oae.api.util.utcDateToLocal(publication.acceptanceDate);
            }],
            'embargo': ['Embargo', 'lock', function(publication) {
                return !publication.underEmbargo ? null : {
                    'embargoDate': publication.embargoDate
                };
            }, '#oa-publicatiometadata-embargo-template'],
            'share': ['Share', 'share', function(publication) {
                return publication.underEmbargo ? null : window.location.protocol + '//' + window.location.host + window.location.pathname;
            }, '#oa-publicatiometadata-share-template'],
            'uploadedBy': ['Uploaded by', 'user', function(publication) {
                return publicationSubmitter.displayName;
            }],
            'department': ['Department', 'building', function(publication) {
                return publication.department;
            }],
            'journal': ['Journal', 'book', function(publication) {
                return publication.journalName;
            }]
        };

        /**
         * Get the user role based on the publication permissions object
         *
         * @return  {String}    role    The user role: either 'admin', 'uploader' or 'anon'
         */
        var getUserRole = function() {
            var permissions = publication.permissions;
            return permissions.isAdmin || permissions.isGlobalAdmin || permissions.isSubmitter || permissions.isAuthor ? 'owner' : 'anon';
        };

        /**
         * Return an array of metadata objects required by the template based on an array of metadata field keys
         *
         * @param  {String[]}    fieldKeys    The fields to generate metadata template data for
         * @return {Object[]}                 The metadata template data
         */
        var getMetadataTemplateDataForFieldKeys = function(fieldKeys) {
            return _.chain(fieldKeys).map(function(fieldKey) {
                var fieldData = fields[fieldKey];
                var templateData = getMetadataTemplateData(fieldData);
                var customTemplate = fieldData[3];
                if (customTemplate && templateData) {
                    templateData.html = oae.api.util.template().render(customTemplate, templateData);
                }
                return templateData;
            }).compact().value();
        };

        /**
         * Get the template data for a single metadata field
         *
         * @param  {Object}    fieldData    The field data (from the fields array)
         * @return {Object}                 The metadata field template data
         */
        var getMetadataTemplateData = function(fieldData) {
            var value = fieldData[2](publication);
            return !value ? null : {
                'key': fieldData[0],
                'icon': fieldData[1],
                'value': value
            };
        };

        /**
         * Renders the metadata template
         */
        var renderMetadata = function() {
            var fields = fieldsPerUserRole[getUserRole()];
            oae.api.util.template().render($('#oa-publicationmetadata-template', $rootel), {
                'metadata': getMetadataTemplateDataForFieldKeys(fields)
            }, $('#oa-publicationmetadata-container', $rootel));
        };

        /**
         * Binds all necessary events
         */
        var addBinding = function() {
            $rootel.on('click', '#oa-publicationmetadata-share-link', function() {
                this.select();
            });
        };

        renderMetadata();
        addBinding();
    };

});
