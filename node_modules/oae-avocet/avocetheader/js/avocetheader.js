/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

 define(['jquery', 'oae.core'], function($, oae) {

    // Delay (in milliseconds) to wait before closing the whole nav when the mouse leaves the header
    var NAV_CLOSE_DELAY = 500;

    // Delay (in milliseconds) to wait before opening a sub nav after mouse over
    var NAV_OPEN_DELAY = 150;

    /** Represents an item in the header's navigation. */
    var Nav = function Nav(href, name, children) {
        // Allow calling Nav without new
        var self = this instanceof Nav ? this : Object.create(Nav.prototype);

        self._href = href;
        self._name = name;
        self._children = children;

        return self;
    };

    // Define Nav's methods
    _.extend(Nav.prototype, {
         /** Get an Array containing this Nav, child Navs, their children etc. */
        'descendents': function descendents(dest) {
            if (dest === undefined) dest = [];

            dest.push(this);
            for (var i in this._children) {
                this._children[i].descendents(dest);
            }
            return dest;
        },

        /** Get the nearest descendet Nav with a defined href. */
        '_findHrefNav': function _findHrefNav() {
            return _.find(this.descendents(), function(x) {
                return Boolean(x._href);
            });
        },

        'href': function href() {
            var link = this._findHrefNav();
            return link === undefined ? null : link._href;
        },

        /** Get the human readable name of the Nav. */
        'name': function name() {
            return this._name;
        },

        'title': function title() {
            var link = this._findHrefNav();
            return link === undefined ? null :
                    'Open the \'' + link.name() + '\' page';
        },

        /** Get an Array of this Nav's immediate children Navs */
        'children': function children() {
            return this._children;
        },

        /** A Nav is active if it's href is the same as the current page's path. */
        'isActive': function isActive(urlPath) {
            if (urlPath === undefined) {
                urlPath = window.location.pathname;
            }

            return this.href() === urlPath;
        },

        'hasActiveChild': function hasActiveChild(urlPath) {
            var active = _.find(this.descendents(), function(nav) {
                return nav.isActive(urlPath);
            });
            return active !== undefined && active !== this;
        }
    });

    // Add static methods
    _.extend(Nav, {
        /** Get an Array of Navs from a (parsed) JSON Array of links. */
        '_fromJSONArray': function fromJSONArray(links) {
            return _.map(links, function(link) {
                return new Nav(
                    link.href,
                    link.name,
                    Nav._fromJSONArray(link.subNavs, true)
                );
            });
        },

        /** Get a root Nav containing Navs from a (parsed) JSON Array of links. */
        'fromJSON': function fromJSON(links) {
            return new Nav(null, 'ROOT', Nav._fromJSONArray(links));
        }
    });

    return function(uid) {

        // The widget container
        var $rootel = $('#' + uid);

        var links = [
            {
                'href': '/',
                'name': 'Home'
            },
            {
                'name': 'About',
                'subNavs': [
                    {
                        'href': '/what-do-i-need-to-do',
                        'name': 'What do I need to do?'
                    },
                    {
                        'href': '/what-is-changing',
                        'name': 'What\'s changing?'
                    },
                    {
                        'href': '/what-is-open-access',
                        'name': 'What is open access?'
                    }
                ]
            }
        ];

        var rootNav = Nav.fromJSON(links);
        var navContainer = $('#oa-avocetheader-nav-container', $rootel);

        /**
         * Initialise the top navigation
         */
        var initNavigation = function() {

            oae.api.util.template().render($('#oa-avocetheader-nav-template', $rootel), {
                'navs': rootNav.children()
            }, navContainer);


            // Open a subnav when:
            //   a) Its label is hovered for NAV_OPEN_DELAY
            //   b) Its label is focused (no delay)
            navContainer.on('mouseenter focus', '.oa-nav-item > a', (function(delay) {
                var timeoutId;

                return function(e) {
                    // When focusing with keyboard, open the nav item without delay
                    var actualDelay = e.type === 'focus' ? 0 : delay;

                    // Cancel any pending view action on this or another nav
                    window.clearTimeout(timeoutId);

                    // View the nav after our delay
                    timeoutId = window.setTimeout(function() {
                        var nav = $(e.target).parent('.oa-nav-item')[0];
                        viewNav(nav);
                    }, actualDelay);
                };
            })(NAV_OPEN_DELAY));

            // Close the nav when the mouse leaves the header for longer than NAV_CLOSE_DELAY 
            $rootel.on('mouseleave mouseenter', (function(delay) {
                var timeoutId;

                return function(e) {
                    if(e.type === 'mouseleave') {
                        timeoutId = setTimeout(stopViewing, delay);
                    }
                    else if(e.type === 'mouseenter') {
                        window.clearTimeout(timeoutId);
                    }
                };
            })(NAV_CLOSE_DELAY));

            // Close the nav when anything outside the nav is focused in the header
            $rootel.on('focusin', function(e) {
                if (!_.contains($(e.target).parents(), navContainer[0])) {
                    stopViewing();
                }
            });
        };

        /** Set a nav DOM element as being viewed. */
        var viewNav = function viewNav(nav) {
            if (!(nav instanceof Element))
                throw new Error('Element expected');

            stopViewing();
            var navs = $(nav).parents('.oa-nav-item').andSelf();
            navs.addClass('viewed');
        };

        /**
         * Clear the the viewed status of all navs.
         *
         * This has the effect of closing the nav, unless the active page is in a sub nav,
         * in which case it'll remain open.
         */
        var stopViewing = function stopViewing() {
            $('.oa-nav-item', $rootel).removeClass('viewed');
        };

        /**
         * Initialise signin/signout functionality in the header
         */
        var initAuthentication = function() {
            oae.api.util.template().render($('#oa-avocetheader-authentication-template', $rootel), {
                'links': links
            }, $('#oa-avocetheader-authentication-container', $rootel));
            // Trigger a login when the login button is clicked.
            $rootel.on('click', '#oa-avocetheader-login', oae.api.authentication.loginFirstEnabledStrategy);
        };

        initNavigation();
        initAuthentication();
    };
});
