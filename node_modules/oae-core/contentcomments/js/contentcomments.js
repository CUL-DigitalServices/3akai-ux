/*
 * Licensed to the Sakai Foundation (SF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The SF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

define(['jquery', 'oae/api/oae.core', 'jquery-plugins/jquery.timeago'], function($, oae) {

    return function(uid, showSettings) {

        // Cache the widget container
        var $rootel = $('#' + uid);

        // Variable used to keep track of current content item
        var contentProfile = null;

        // Variable used to keep track of the current infinite scroll
        var infinityScroll = null;



        /**
         * When a reply or comment is made the comment object is constructed added to the UI.
         *
         * @param {Comment}    comment    The Comment object that was returned from the server when created
         */
        //var constructAndAppendComment = function(comment) {
        //    if (!comment.replyTo) {
        //        $('.contentcomments_widget .contentcomments_content_container', $rootel).prepend(oae.api.util.renderTemplate('#contentcomments_comment_template', {
        //            comments: {'results': comment},
        //            canManage: canManage(),
        //            oae: oae
        //        }));
        //    } else {
        //        $('div[data-commentid="' + comment.replyTo + '"]').next().hide();
        //        $('div[data-commentid="' + comment.replyTo + '"] .contentcomments_reply_button').toggleClass('active');
        //        $('.contentcomments_comment_container[data-commentId="' + comment.replyTo + '"]').after(oae.api.util.renderTemplate('#contentcomments_comment_template', {
        //            comments: {'results': comment},
        //            canManage: true,
        //            oae: oae
        //        }));
        //    }
        //};

        /**
         * Marks a comment in the list of comments as deleted
         *
         * @param {Comment}    comment    The comment that was deleted
         */
        //var markCommentAsDeleted = function(comment) {
        //    $('.contentcomments_comment_container[data-commentId="' + comment.commentId + '"]').html(oae.api.util.renderTemplate('#contentcomments_comment_template', {
        //        comments: {'results': comment},
        //        canManage: canManage(),
        //        oae: oae
        //    }));
        //};

        ///////////////////////
        // Comment functions //
        ///////////////////////

        /**
         * Creates a new comment on the content item and calls the functionality that appends/prepends it to the list of comments in the UI.
         * TODO: Replace the hardcoded content ID with the content ID coming out of the content profile
         *
         * @param {String}    comment    The comment text that was created
         * @param {String}    replyTo    If the comment was a reply on another comment, this is the commentId of that comment
         * @param {String}    level      The level of the comment
         */
         var setUpCreateComment = function() {
             // Creating top-level comments
             $rootel.on('click', '#contentcomments_post_comment', function() {
                var comment = $('#contentcomments_post_comment_body', $rootel).val();
                // Post the comment and re-render the results
                oae.api.content.createComment(contentProfile.contentId, comment, null, setUpInfiniteScroll);
                // Clear the comment field
                $('#contentcomments_post_comment_body', $rootel).val('');
            });
        };

        /**
         * TODO
         */
        var setUpReplyComment = function() {
            $rootel.on('click', '.contentcomments_reply_button', function() {
                $(this).toggleClass('active');
                $(this).parent().next().toggle();
            });

            $rootel.on('click', '.contentcomments_post_reply', function() {
                var replyTo = $(this).attr('data-replyTo');
                var level = parseInt($(this).attr('data-level')) || 0;
                var comment = $(this).next().val();
                createComment(comment, replyTo, level);
            });
        };

        /**
         * Deletes a comment from the content item and calls the functionality that deletes it from the list of comments in the UI.
         * TODO: Replace the hardcoded content ID with the content ID coming out of the content profile
         *
         * @parm {String}    commentId    The ID of the comment to delete
         */
        var setUpDeleteComment = function() {
            $rootel.on('click', '.contentcomments_delete_button', function() {
                var commentId = $(this).parents('li').attr('data-id');
                oae.api.content.deleteComment(contentProfile.contentId, commentId, function(err, deleted) {
                    if (err) {
                        throw new Error('Comment could not be deleted.');
                    }
                    if (deleted && deleted.deleted) {
                        removeCommentFromList(commentId);
                    } else {
                        markCommentAsDeleted(comment);
                    }
                });
            });
        };

        /**
         * Removes a comment from the list of comments
         *
         * @param {String}    commentId    The comment ID of the comment to be removed from the content
         */
        var removeCommentFromList = function(commentId) {
            $comment = $('#contentcomments_content_container li[data-id="' + commentId + '"]');
            $comment.hide('fast', function() {
                $comment.remove();
            });
        };

            //    createComment(comment, replyTo, level);
        //     });
        //    oae.api.content.createComment('c:camtest:TeftBohhjqM', comment, replyTo, function(err, comment) {
        //        if (err) {
        //            throw new Error('Comment could not be placed.');
        //        }
        //        constructAndAppendComment(comment);
        //    });
        //};


        //////////////////////////////
        // Initialization functions //
        //////////////////////////////

        /**
         * Binds various functions to elements in the content comments UI.
         */
        //var addBinding = function() {
            // Post comment/reply
            //$rootel.on('click', '.post_comment', function() {
            //    var replyTo = $(this).attr('data-replyTo');
            //    var level = parseInt($(this).attr('data-level')) || 0;
            //    var comment = $(this).next().val();
            //    createComment(comment, replyTo, level);
            //});

            // Delete comment/reply
            //$rootel.on('click', '.contentcomments_delete_button', function() {
            //    var commentId = $(this).parent().attr('data-commentid');
            //    deleteComment(commentId);
            //});

            // Show reply form
            //$rootel.on('click', '.contentcomments_reply_button', function() {
            //    $(this).toggleClass('active');
            //    $(this).parent().next().toggle();
            //});
        //};

        /**
         * TODO
         */
        var setUpInfiniteScroll = function() {
            contentProfile = sakai_global.contentProfile;
            // Clear the current infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }
            infinityScroll = $('#contentcomments_content_container', $rootel).infiniteScroll('/api/content/' + contentProfile.contentId + '/comments', null, $('#contentcomments_comment_template'), {
                'postProcessor': function(data) {
                    data.canManage = contentProfile.isManager;
                    return data;
                }
            });
        };

        setUpCreateComment();
        setUpReplyComment();
        setUpDeleteComment();

        // Check if the content profile information has already been retrieved
        // TODO: Remove this once we have a better way of sharing data
        if (sakai_global && sakai_global.contentProfile) {
            setUpInfiniteScroll();
        }
        $(window).on('ready.content.oae', setUpInfiniteScroll);

    };
});
