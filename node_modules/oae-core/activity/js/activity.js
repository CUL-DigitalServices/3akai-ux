/*
 * Licensed to the Sakai Foundation (SF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The SF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core'], function($, _, oae) {

    // TODO
    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        // Variable that will be used to keep track of the current infinite scroll instance
        var infinityScroll = false;

        /**
         * Sort entities based on whether or not they have a thumbnail. Entities with
         * thumbnails will be listed in front of those with no thumbnails, as we give
         * preference to these for UI rendering purposes.
         *
         * @see Array#sort
         */
        var sortEntityCollection = function(a, b) {
            if (a.image && !b.image) {
                return -1;
            } else if (!a.image && b.image) {
                return 1;
            }
            return 0;
        };

        /**
         * Callback function to sort comments based on the thread key
         * TODO
         *
         * @see Array#sort
         */
        var sortComments = function(a, b) {
            // TODO: Document threadkeys
            return a['oae:commentThreadKey'].split('#').pop() > b['oae:commentThreadKey'].split('#').pop();
        };

        /**
         * Parses the comments in an activity and makes a tree that can be rendered in the UI.
         * Takes into account replies, orders them correctly and shows one extra comment for context
         * TODO
         *
         * @param  {Object[]}   comments   The array of comments on the activity item
         * TODO
         */
        var constructCommentTree = function(comments) {
            var orderedTree = [];

            // TODO
            $.each(comments, function(index, comment) {
                if (comment['oae:replyTo']) {
                    // Check if the reply is already present in the ordered tree
                    var exists = _.findWhere(orderedTree, {'oae:id': comment['oae:replyTo']['oae:id']});
                    // If it isn't, we add it to the ordered list, just ahead of the current comment
                    if (!exists) {
                        orderedTree.push(comment['oae:replyTo']);
                    }
                }
                orderedTree.push(comment);
            });

            // TODO
            $.each(orderedTree, function(index, comment) {
                comment['oae:level'] = 0;
                // TODO
                if (comment['oae:replyTo']) {
                    var replyTo = _.findWhere(orderedTree, {'oae:id': comment['oae:replyTo']['oae:id']});
                    comment['oae:level'] = replyTo['oae:level'] + 1;
                }
            });

            return orderedTree;
        };

        /**
         * Process the incoming activities by sorting all entity collections on whether or not they have
         * thumbnail images, as we give preference to these for UI rendering purposes. For activities
         * that involve comments, we also order the comments by date to make sure that we only show the
         * latest comments.
         *
         * @param  {Object}    data    The activity stream for the current context per the activitystrea.ms spec
         */
        var processActivities = function(data) {
            for (var i = 0; i < data.items.length; i++) {
                var activity = data.items[i];

                // Sort the entity collections based on whether or not they have a thumbnail
                if (activity.actor['oae:collection']) {
                    activity.actor['oae:collection'].sort(sortEntityCollection);
                }

                if (activity.object && activity.object['oae:collection']) {
                    activity.object['oae:collection'].sort(sortEntityCollection);
                }

                if (activity.target && activity.target['oae:collection']) {
                    activity.target['oae:collection'].sort(sortEntityCollection);
                }

                // For content comments, we process the comments into an ordered tree that contains the latest
                // 2 comments and the comments they were replies to, if any
                if (activity['oae:activityType'] === 'content-comment') {
                    var comments = activity.object['oae:collection'];
                    if (!comments) {
                        comments = [activity.object];
                    }

                    // Sort the comments based on the created timestamp
                    comments.sort(sortComments);
                    // Extract the latest 2 comments
                    comments = comments.splice(-2);
                    // Convert these comments into an ordered tree that also includes the comments they were
                    // replies to, if any
                    comments = constructCommentTree(comments);
                    activity.object['oae:collection'] = comments;
                    console.log(comments);
                }
            }
            return {'results': data.items};
        };

        /**
         * Initialize a new infinite scroll container that fetches the activity stream
         * for the current context.
         */
        var getActivity = function() {
            // Disable the previous infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }

            var url = '/api/activity/' + widgetData.principalId;

            // Set up the infinite scroll for the activity stream
            infinityScroll = $('.oae-list', $rootel).infiniteScroll(url, {
                'limit': 10
            }, '#activity-items-template', {
                'postProcessor': processActivities,
                'emptyListProcessor': handleEmptyResultList
            });
        };

        /**
         * Show the empty list message when no results are found. This function will
         * be called by the infinite scroll plugin.
         */
        var handleEmptyResultList = function() {
            oae.api.util.template().render($('#activity-noresults-template', $rootel), null, $('.oae-list', $rootel));
        };

        getActivity();

    };
});
