/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function ($, oae) {

    return function (uid) {

        // The widget container
        var $rootel = $('#' + uid);

        // Variable that will keep track of the current page context
        var contextProfile = null;

        // Variable that will keep track of the items to add to a folder
        var selectedItems = [];

        // Variable that will be used to keep track of the infinite scroll instances
        var groupsInfinityScroll = false;
        var foldersInfinityScroll = false;

        /**
         * TODO
         */
        var setUpGroups = function() {
            // TODO
            $('#addtofolder-folders', $rootel).hide();
            $('#addtofolder-groups', $rootel).show();

            // TODO
            if (groupsInfinityScroll) {
                return;
            }

            // TODO
            var initialContent = oae.api.util.template().render($('#addtofolder-groups-template', $rootel), {'results': [oae.data.me]});;

            var url = '/api/user/' + oae.data.me.id + '/memberships';

            // Set up the infinite scroll instance
            infinityScroll = $('#addtofolder-groups-container', $rootel).infiniteScroll(url, {
                'limit': 12
            }, '#addtofolder-groups-template', {
                'initialContent': initialContent
                //'postProcessor': function(data) {
                    // Let the template know whether or not the current list
                    // is a main list or a search list, as different paging
                    // keys need to be provided for each
                //    data.query = query;
                //    data.displayOptions = {
                //        'showCheckbox': widgetData.canManage ? true : false
                //    };
                //    return data;
                //},
                //'emptyListProcessor': function() {
                //    oae.api.util.template().render($('#memberships-noresults-template', $rootel), {
                //        'query': query
                //    }, $('.oae-list', $rootel));
                //}
            });
        };

        /**
         * TODO
         */
        var setUpFolders = function(principalId) {

        };

        /**
         * Initialize the add to folder modal dialog
         */
        var setUpAddToFolderModal = function() {
            $(document).on('click', '.oae-trigger-addtofolder', function() {
                $('#addtofolder-modal', $rootel).modal({
                    'backdrop': 'static'
                });

                // Get the page context
                $(document).trigger('oae.context.get', 'addtofolder');
            });

            // Listen to the event that returns the current page context
            $(document).on('oae.context.send.addtofolder', function(ev, context) {
                contextProfile = context;
                // Get the list selection
                $(document).trigger('oae.list.getSelection', 'addtofolder');
            });

            // Listen to the event that returns the list of selected content items
            $(document).on('oae.list.sendSelection.addtofolder', function(ev, selected) {
                selectedItems = selected.results;
                // Show the list of folders for the current context when the context is the current user
                // or a group that the current user manages
                if (contextProfile.id === oae.data.me.id || (contextProfile.resourceType === 'group' && contextProfile.isManager)) {
                    setUpFolders(contextProfile.id);
                } else {
                    setUpGroups();
                }
            });
        };

        setUpAddToFolderModal();

    };
});
