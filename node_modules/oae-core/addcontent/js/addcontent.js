/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae/api/oae.core', 'jquery-plugins/jquery.fileupload', 'jquery-plugins/jquery.iframe-transport'], function($, _, oae) {

    return function(uid, showSettings) {

        ////////////////////
        // Initialization //
        ////////////////////

        // Initialize the modal dialog
        var modalContainer = oae.api.util.modal($('#addcontent_container'));

        /**
         * Initialize the add content overlay. We show the modal container,
         * and fill out the user's group memberships in the target libraries
         */
        var initAddContent = function() {
            // Show the modal dialog every time the trigger is clicked
            $(document).on('click', '.oae-trigger-addcontent', function() {
                modalContainer.open();
            });
        };

        initAddContent();

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        return;




























        /////////////////////////////
        // CONFIGURATION VARIABLES //
        /////////////////////////////

        // Containers
        var $addcontentContainer = $('#addcontent_container');
        var $addcontentContainerNewItem = $('#addcontent_container_newitem');
        var $addcontentContainerSelectedItemsContainer = $('#addcontent_container_selecteditems_container');
        var $addcontentSelecteditemsEditDataContainer = $('#addcontent_selecteditems_edit_data_container');
        var addcontentSelecteditemsEditDataContainer = '#addcontent_selecteditems_edit_data_container';
        var $addcontentSelectedItemsEditPermissionsContainer = $('#addcontent_selecteditems_edit_permissions_container');
        var addcontentSelectedItemsEditPermissionsContainer = '#addcontent_selecteditems_edit_permissions_container';
        var $addcontentNewItemContainer = $('.addcontent_newitem_container');

        // Templates
        var addcontentUploadContentTemplate = '#addcontent_upload_content_template';
        var addcontentAddDocumentTemplate = '#addcontent_add_document_template';
        var addcontentAddLinkTemplate = '#addcontent_add_link_template';
        var addcontentSelectedItemsTemplate = 'addcontent_selecteditems_template';
        var addcontentSelectedItemsEditPermissionsTemplates = 'addcontent_selecteditems_edit_permissions_template';
        var addcontentSelectedItemsEditDataTemplate = 'addcontent_selecteditems_edit_data_template';
        
        // Elements
        var $addcontentContainerLHChoiceItem = $('.addcontent_container_lhchoice_item');
        var addcontentContainerLHChoiceSelectedSubitem = '.addcontent_container_lhchoice_selected_subitem';
        var $addcontentContainerLHChoiceSubItem = $('.addcontent_container_lhchoice_subitem');
        var $addcontentContainerNewItemAddToList = $('.addcontent_container_newitem_add_to_list');
        var addcontentContainerStartUploadButton = '.addcontent_container_start_upload';
        var addcontentSelectedItemsRemove = '.addcontent_selecteditems_remove';
        var addcontentSelectedItemsActionsEdit = '.addcontent_selecteditems_actions_edit';
        var addcontentSelectedItemsActionsPermissions = '.addcontent_selecteditems_actions_permissions';
        var addcontentSelectedItemsEditDataClose = '.addcontent_selecteditems_edit_data_close';
        var addcontentContainerNewItemSaveChanges = '.addcontent_container_newitem_save_changes';
        var addcontentSelectedItemsEditIndex = '.addcontent_selecteditems_edit_index';
        var $addcontentContainerNewItemRaquoRight = $('#addcontent_container_newitem_raquo_right');
        var addcontentAddLinkURL = '#addcontent_add_link_url';
        var addcontentAddLinkTitle = '#addcontent_add_link_title';
        var addcontentAddLinkDescription = '#addcontent_add_link_description';
        var addcontentAddLinkTags = '#addcontent_add_link_tags';
        var addcontentUploadContentOriginalTitle = '.addcontent_upload_content_originaltitle';
        var addcontentUploadContentTitle = '#addcontent_upload_content_title';
        var addcontentUploadContentDescription = '#addcontent_upload_content_description';
        var addcontentUploadContentTags = '#addcontent_upload_content_tags';
        var addcontentUploadContentPermissions = '#addcontent_upload_content_permissions';
        var addcontentAddDocumentTitle = '#addcontent_add_document_title';
        var addcontentAddDocumentPermissions = '#addcontent_add_document_permissions';
        var addcontentAddDocumentDescription = '#addcontent_add_document_description';
        var addcontentAddDocumentTags = '#addcontent_add_document_tags';
        var addcontentSelectedItemsEditDataTitle = '#addcontent_selecteditems_edit_data_title';
        var addcontentSelectedItemsEditDataDescription = ' #addcontent_selecteditems_edit_data_description';
        var addcontentSelectedItemsEditDataTags = ' #addcontent_selecteditems_edit_data_tags';
        var addcontentSelectedItemsEditPermissionsPermissions = '#addcontent_selecteditems_edit_permissions_permissions';
        var addcontentSelectedItemsEditPermissionsCopyright = '#addcontent_selecteditems_edit_permissions_copyright';
        var addcontentUploadContentFields = '#addcontent_upload_content_fields';
        var addcontentSaveTo = '#addcontent_saveto';
        var addcontentSelectedItemsEditDataForm = '#addcontent_selecteditems_edit_data_form';

        // Classes
        var addcontentContainerLHChoiceSelectedItem = 'addcontent_container_lhchoice_selected_item';
        var addcontentContainerLHChoiceItemClass = 'addcontent_container_lhchoice_item';
        var addcontentContainerNewItemExtraRoundedBorderClass = 'addcontent_container_newitem_extraroundedborder';
        var addcontentContainerLHChoiceSelectedSubitemClass = 'addcontent_container_lhchoice_selected_subitem';
        var addcontentContainerNewItemRaquoRightDocumentsposition = 'addcontent_container_newitem_raquo_right_documentsposition';
        var addcontentContainerNewItemAddToListDocumentsposition = 'addcontent_container_newitem_add_to_list_documentsposition';
        var addcontentContainerNewItemAddToListUploadNewContent = 'addcontent_container_newitem_add_to_list_upload_new_content';
        var addcontentContainerNewItemAddToListAddLink = 'addcontent_container_newitem_add_to_list_add_link';
        
        // List Variables
        var itemsToUpload = [];
        var itemsUploaded = 0;
        var brandNewContent = {};
        var allNewContent = [];
        var lastUpload = [];
        var libraryToUploadTo = '';
        // Keep track of number of files in the upload list selected by browsing the OS
        // This number will later be used to check against the multifile list of uploads to avoid bug (https://jira.sakaiproject.org/browse/SAKIII-3269)
        var numberOfBrowsedFiles = 0;
        var $autoSuggestElt = false,
            $autoSuggestListCatElt = false,
            autoSuggestElts = {},
            $editAutoSuggestElt = false,
            $editAutoSuggestListCatElt = false;

        // Paths
        var uploadPath = '/api/content/create';

        // Forms
        var $addcontentUploadContentForm = $('#addcontent_upload_content_form');
        var addcontentForm = '.addcontent_form';
        var addcontentAddLinkForm = '#addcontent_add_link_form';
        var $addcontentAddLinkForm = $('#addcontent_add_link_form');
        var addcontentAddDocumentForm = '#addcontent_add_document_form';
        
        var multifileQueueAddAllowed = true;
        var contentUploaded = false;
        var hideAfterContentUpload = false;

        var currentSelectedLibrary = sakai.data.me.userid;

        // jquery fileupload related variables
        var tmpBrowsedFile = {};
        var filesList = [];
        var contentDataBatch = [];
        // IE does not support XHR file uploads so we fallback to the iframe transport for uploads
        var useIframeTransport = !$.support.xhrFileUpload && !$.support.xhrFormDataFileUpload;
        // When a file is added using the iframe transport, store the submit function
        var fileUploadForms = {};

        ////////////////////////////////
        // Get newly uploaded content //
        ////////////////////////////////

        sakai_global.addcontent.getNewContent = function(library) {
            var newContentLibrary = [];
            // grab all of the newly uploaded content, regardless of target library
            if (!library) {
                newContentLibrary = allNewContent;
            } else if (brandNewContent[library]) {
                newContentLibrary = brandNewContent[library];
            }
            // return a copy
            return $.merge([], newContentLibrary);
        };

        var deleteContent = function(e, paths) {
            if (paths && paths.length) {
                $.each(paths, function(i, path) {
                    $.each(allNewContent, function(j, newContent) {
                        if (newContent && newContent._path === path) {
                            allNewContent.splice(j,1);
                        }
                    });
                    $.each(brandNewContent, function(lib, items) {
                        $.each(items, function(k, item) {
                            if (item && item._path === path) {
                                items.splice(k,1);
                            }
                        });
                    });
                });
            }
        };

        /////////////////
        // ITEMS QUEUE //
        /////////////////

        /**
         * Following 4 functions enable or disable the buttons that
         *  - add items to the queue
         *  - upload items to the repository
         */
        var enableAddToQueue = function() {
            $addcontentContainerNewItemAddToList.removeAttr('disabled');
        };

        var disableAddToQueue = function() {
            $addcontentContainerNewItemAddToList.attr('disabled','disabled');
        };

        var enableStartUpload = function() {
            $(addcontentContainerStartUploadButton).removeAttr('disabled');
        };

        var disableStartUpload = function() {
            $(addcontentContainerStartUploadButton).attr('disabled','disabled');
        };

        /**
         * Checks if any content items to add are already associated with the selected library
         * @param {Function} callback Callback function
         */
        var markLibraryHasContentItems = function(callback) {
            var collectionGroupIds = [];
            // check if any items are collections
            $.each(itemsToUpload, function(index, item) {
                item.currentSelectedLibraryHasItem = false;
                if (sakai.api.Content.Collections.isCollection(item)) {
                    var collectionGroupId = sakai.api.Content.Collections.getCollectionGroupId(item);
                    collectionGroupIds.push(collectionGroupId);
                    item.collectionGroupId = collectionGroupId;
                }
            });

            sakai.api.Groups.getMembers(collectionGroupIds, function(success, data) {
                // loop through each collection group
                $.each(data, function(groupRolesKey, groupRoles) {
                    // loop through each group role
                    $.each(groupRoles, function(roleMembersKey, roleMembers) {
                        if (roleMembers.results && roleMembers.results.length) {
                            // loop through members in the role
                            $.each(roleMembers.results, function(memberKey, member) {
                                var authId = false;
                                if (member.groupid) {
                                    authId = member.groupid;
                                } else if (member.userid) {
                                    authId = member.userid;
                                }
                                // loop through each item to see if the collection is already associated with the selected library
                                $.each(itemsToUpload, function(itemsToUploadIdx, item) {
                                    if (item.collectionGroupId === groupRolesKey && currentSelectedLibrary === authId) {
                                        item.currentSelectedLibraryHasItem = true;
                                    }
                                });
                            });
                        }
                    });
                });
                if ($.isFunction(callback)) {
                    callback();
                }
            }, true);
        };

        /**
         * Checks if all the items are in the selected library already
         */
        var libraryHasAllItems = function() {
            var hasAllItems = true;
            $.each(itemsToUpload, function(i, content) {
                if (!content.currentSelectedLibraryHasItem) {
                    hasAllItems = false;
                    return false;
                }
            });
            return hasAllItems;
        };

        /**
         * Render the queue
         * @param {Boolean} append Append added content to the exisitng queue, rather than re-rending the entire content list to upload.
         * @param {Array} contentToAdd Array of objects containing data about the content to be appended to the queue
         */
        var renderQueue = function(append, contentToAppend) {
            sakai.api.Groups.getMyMemberships(function(err, groups) {
                markLibraryHasContentItems(function() {
                    var templateData = {
                        'append': false,
                        'items': itemsToUpload,
                        'sakai': sakai,
                        'me': sakai.data.me,
                        'groups': groups,
                        'currentSelectedLibrary': currentSelectedLibrary
                    };

                    var $queueList = $addcontentContainerSelectedItemsContainer.children('ul');

                    if (append && $queueList.length) {
                        templateData.append = true;
                        templateData.items = contentToAppend;
                        $queueList.append(
                            sakai.api.Util.TemplateRenderer(addcontentSelectedItemsTemplate, templateData)
                        );
                    } else {
                        $addcontentContainerSelectedItemsContainer.html(
                            sakai.api.Util.TemplateRenderer(addcontentSelectedItemsTemplate, templateData)
                        );
                    }
                });
            });
        };

        var resetQueue = function() {
            itemsToUpload = [];
            itemsUploaded = 0;
            disableAddToQueue();
            renderQueue();
            $('#addcontent_container input, #addcontent_container textarea').val('');
            tmpBrowsedFile = {};
            filesList = [];
            contentDataBatch = [];
        };

        /**
         * Add an item to the queue
         * @param {Object/Array} contentToAdd Object or array of objects containing data about the object to be added to the queue
         * @param {Boolean} disableRender Disable rendering of the queue.
         */
        var addContentToQueue = function(contentToAdd, disableRender, append) {
            if ($.isArray(contentToAdd)) {
                itemsToUpload = itemsToUpload.concat(contentToAdd);
            } else {
                itemsToUpload.push(contentToAdd);
            }

            disableAddToQueue();
            enableStartUpload();

            if (!disableRender) {
                renderQueue(append, contentToAdd);
            }
        };

        /**
         * Remove an item from the queue
         */
        var removeItemToAdd = function() {
            $addcontentSelectedItemsEditPermissionsContainer.hide();
            $addcontentSelecteditemsEditDataContainer.hide();

            var index = $(this).parent()[0].id.split('addcontent_selecteditems_')[1];
            var obj = itemsToUpload[index];

            var filename = obj['sakai:originaltitle'];

            if (filename) {
                // Remove item from the file upload list
                filesList = $.grep(filesList, function(val) {
                    return filename !== val.name;
                });
            }

            switch (obj.type) {
                case 'content':
                    var $found = $('*:contains(\'' + obj.originaltitle + '\')');
                    $found.last().prev('a').click();
                    // If the user removes an item that was selected through browsing the OS reduce the file count to avoid bug (https://jira.sakaiproject.org/browse/SAKIII-3269)
                    if (obj.origin === 'user') {
                        numberOfBrowsedFiles--;
                    }
                    break;
            }

            itemsToUpload.splice(index,1);

            if (!itemsToUpload.length) {
                disableStartUpload();
            } else {
                var disableUpload = libraryHasAllItems();
                if (disableUpload) {
                    disableStartUpload();
                }
            }

            renderQueue();
        };

        /**
         * Construct an item to add to the queue
         * Depending on the type of the item to add construct a different object
         */
        var constructItemToAdd = function() {
            var uniqueId = sakai.api.Util.generateWidgetId();
            var tags = sakai.api.Util.AutoSuggest.getTagsAndCategories($autoSuggestElt, true);
            var $thisForm = $(this).parents($addcontentNewItemContainer).children(addcontentForm);
            if ($(this).attr('id') === 'addcontent_container_newitem_raquo_right') {
                $thisForm = $(this).prev().children(':visible').find(addcontentForm);
            }

            switch ($thisForm.attr('id')) {

                //////////////////////////
                // Uploading a new file //
                //////////////////////////

                case 'addcontent_upload_content_form':
                    var originalTitle = $thisForm.find(addcontentUploadContentOriginalTitle)[0].id;

                    // Calculate the file extension
                    var splitOnDot = originalTitle.split('.');
                    var contentObj = {
                        'sakai:pooled-content-file-name': $thisForm.find(addcontentUploadContentTitle).val(),
                        'description': $thisForm.find(addcontentUploadContentDescription).val(),
                        'visibility': $thisForm.find(addcontentUploadContentPermissions).val(),
                        'copyright': $('#addcontent_upload_content_copyright').val(),
                        'originaltitle': originalTitle,
                        'tags': tags,
                        'fileextension': splitOnDot[splitOnDot.length - 1],
                        'css_class': sakai.config.MimeTypes[sakai.config.Extensions[(originalTitle).slice(originalTitle.lastIndexOf('.') + 1, originalTitle.length).toLowerCase()] || 'other'].cssClass || 'oae-icon-unknown',
                        'type': 'content',
                        'origin':'user' // 'origin' tells Sakai that this file was selected from the users hard drive
                    };
                    // Store the temporary browsed file in the upload array
                    filesList.push(tmpBrowsedFile);
                    addContentToQueue(contentObj);
                    multifileQueueAddAllowed = true;
                    $thisForm.find(addcontentUploadContentTitle + ', ' + addcontentUploadContentDescription + ', ' + addcontentUploadContentTags).val('');
                    // Increase the number of files that the user browsed for and added to the list
                    numberOfBrowsedFiles++;
                    break;

                ///////////////////
                // Adding a link //
                ///////////////////

                case 'addcontent_add_link_form':
                    var linkObj = {
                        'link': $thisForm.find(addcontentAddLinkURL).val(),
                        'name': $thisForm.find(addcontentAddLinkTitle).val() || $thisForm.find(addcontentAddLinkURL).val(),
                        'description': $thisForm.find(addcontentAddLinkDescription).val(),
                        'tags': tags,
                        'visibility': sakai.config.Permissions.Links.defaultaccess,
                        'copyright': sakai.config.Permissions.Copyright.defaults['links'],
                        'css_class': 'oae-icon-url',
                        'type':'link'
                    };
                    addContentToQueue(linkObj);
                    $thisForm[0].reset();
                    break;

                /////////////////////////////
                // Creating a new document //
                /////////////////////////////

                case 'addcontent_add_document_form':
                    if ($thisForm.valid()) {
                        var documentObj = {
                            'sakai:pooled-content-file-name': $thisForm.find(addcontentAddDocumentTitle).val(),
                            'sakai:permissions': $thisForm.find(addcontentAddDocumentPermissions).val(),
                            'sakai:description': $thisForm.find(addcontentAddDocumentDescription).val(),
                            'sakai:tags': tags,
                            'sakai:copyright': sakai.config.Permissions.Copyright.defaults['sakaidocs'],
                            'css_class': 'oae-icon-sakaidoc',
                            'type': 'document'
                        };
                        addContentToQueue(documentObj);
                        $thisForm[0].reset();
                    }
                    break;

            }
            sakai.api.Util.AutoSuggest.reset( $autoSuggestElt );
            sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest( $autoSuggestElt, null, $autoSuggestListCatElt );
        };

        ////////////////////
        // D&D'ing a file //
        ////////////////////

       /**
        * This function is invoken when a file is dropped from the desktop into
        * the collection panel. The file is added to the list of items to upload.
        * @param {Object} file    File that has been dropped in from the desktop
        */
       var fileDropped = function(file) {
            filesList.push(file);
            var extension = file.name.split('.');
            extension = extension[extension.length - 1];
            var contentObj = {
                'sakai:originaltitle': file.name,
                'sakai:fileextension': extension,
                'sakai:pooled-content-file-name': file.name,
                'sakai:description': '',
                'sakai:tags': '',
                'sakai:permissions': sakai.config.Permissions.Content.defaultaccess,
                'sakai:copyright': sakai.config.Permissions.Copyright.defaults['content'],
                'css_class': sakai.api.Content.getMimeTypeData(file.type).cssClass,
                'type': 'content',
                'fileReader': file
            };
            // SAKIII-4264 - we need to disable the renderQueue function in here
            // so we don't get an unresponsive script error in Firefox
            addContentToQueue(contentObj, true);
        };

        ////////////////////////////////////////////////
        // Edit details and Add permissions pop-overs //
        ////////////////////////////////////////////////

        /**
         * Show the pop up to enable the user to edit the permissions of a file in queue (permissions and copyright)
         */
        var changePermissions = function() {
            $addcontentSelecteditemsEditDataContainer.hide();
            var index = $(this).parents('li')[0].id.split('_')[2];
            $addcontentSelectedItemsEditPermissionsContainer.html(sakai.api.Util.TemplateRenderer(addcontentSelectedItemsEditPermissionsTemplates,{item: itemsToUpload[index], i:index, copyright:sakai.config.Permissions.Copyright, sakai:sakai}));
            $addcontentSelectedItemsEditPermissionsContainer.show();
            $addcontentSelectedItemsEditPermissionsContainer.css('left', $(this).parents('li').position().left + 'px');
            $addcontentSelectedItemsEditPermissionsContainer.css('top', $(this).parents('li').position().top + 40 + 'px');
        };

        /**
         * Show the pop up to enable the user to edit the data of a file in queue (description, tags and title)
         */
        var editData = function() {
            $addcontentSelectedItemsEditPermissionsContainer.hide();
            var index = $(this).parents('li')[0].id.split('_')[2];
            $addcontentSelecteditemsEditDataContainer.html(sakai.api.Util.TemplateRenderer(addcontentSelectedItemsEditDataTemplate,{item: itemsToUpload[index], i:index}));
            $addcontentSelecteditemsEditDataContainer.show();
            $addcontentSelecteditemsEditDataContainer.css('left', $(this).parents('li').position().left + 'px');
            $addcontentSelecteditemsEditDataContainer.css('top', $(this).parents('li').position().top + 40 + 'px');

            var editValidateOpts = {
                onclick: true,
                onkeyup: function(element) {
                    $(element).valid();
                },
                onfocusout: true,
                success: function() {
                    $(addcontentContainerNewItemSaveChanges).removeAttr('disabled');
                },
                error: function() {
                    $(addcontentContainerNewItemSaveChanges).attr('disabled','disabled');
                }
            };

            sakai.api.Util.Forms.validate($(addcontentSelectedItemsEditDataForm), editValidateOpts, true);
            $editAutoSuggestElt = $( '#addcontent_selecteditems_edit_data_tags:visible', $addcontentSelecteditemsEditDataContainer );
            $editAutoSuggestListCatElt = $( '.list_categories', $addcontentSelecteditemsEditDataContainer );
            sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest( $editAutoSuggestElt, null, $editAutoSuggestListCatElt, itemsToUpload[index]['sakai:tags'] );
        };

        /**
         * Close the edit popup
         */
        var closeEditData = function() {
            $(this).parent().parent().hide();
        };

        /**
         * Save the changes made to a file in the queue
         */
        var saveEdit = function() {
            var index = $( addcontentSelectedItemsEditIndex ).attr( 'id' );
            if ( $addcontentSelecteditemsEditDataContainer.is( ':visible' ) ) {
                itemsToUpload[index]['sakai:pooled-content-file-name'] = $(addcontentSelecteditemsEditDataContainer + ' ' + addcontentSelectedItemsEditDataTitle).val();
                itemsToUpload[index]['sakai:description'] = $(addcontentSelecteditemsEditDataContainer + ' ' + addcontentSelectedItemsEditDataDescription).val();
                itemsToUpload[index]['sakai:tags'] = sakai.api.Util.AutoSuggest.getTagsAndCategories( $editAutoSuggestElt, true );
            } else {
                itemsToUpload[index]['sakai:permissions'] = $(addcontentSelectedItemsEditPermissionsContainer + ' ' + addcontentSelectedItemsEditPermissionsPermissions).val();
                itemsToUpload[index]['sakai:copyright'] = $(addcontentSelectedItemsEditPermissionsContainer + ' ' + addcontentSelectedItemsEditPermissionsCopyright).val();
            }
            $(this).parent().parent().hide();
            renderQueue();
        };


        ///////////////////////
        // UPLOADING ACTIONS //
        ///////////////////////

        /**
         * Check if all items have been uploaded
         */
        var checkUploadCompleted = function(files, contentObj) {
            itemsUploaded++;
            if (itemsToUpload.length === itemsUploaded) {
                sakai.data.me.contentCount += itemsUploaded;
                var tmpItemsAdded = $.extend(true, [], existingAdded);
                var itemsAdded = [];
                $.merge(tmpItemsAdded, lastUpload);
                // SAKIII-5583 Filter out items that cannot be shared (and were not shared)
                $.each(tmpItemsAdded, function(index, item) {
                    if (sakai.api.Content.canCurrentUserShareContent(item)) {
                        itemsAdded.push(item);
                    }
                });
                $(document).trigger('done.addcontent.sakai', [itemsAdded, libraryToUploadTo]);
                // If adding to a group library or collection, these will also still be added to my library
                if (libraryToUploadTo !== sakai.data.me.userId) {
                    brandNewContent[sakai.data.me.userId] = brandNewContent[sakai.data.me.userId] || [];
                    _.uniq($.merge(brandNewContent[sakai.data.me.userId], lastUpload));
                }
                brandNewContent[libraryToUploadTo] = brandNewContent[libraryToUploadTo] || [];
                _.uniq($.merge(brandNewContent[libraryToUploadTo], lastUpload));
                _.uniq($.merge(allNewContent, lastUpload));
                lastUpload = [];
                sakai.api.Util.Modal.close($addcontentContainer);
                sakai.api.Util.progressIndicator.hideProgressIndicator();
                var librarytitle = $(addcontentSaveTo + ' option:selected').text();
                if (sakai.api.Content.Collections.isCollection(libraryToUploadTo)) {
                    sakai.api.Util.notification.show(sakai.api.i18n.getValueForKey('COLLECTION'), sakai.api.Util.TemplateRenderer('addcontent_notification_collection_finished_template', {
                        collectionid: libraryToUploadTo.substring(2),
                        collectiontitle: librarytitle,
                        uploadtocollection: true,
                        uploadcount: itemsUploaded,
                        contenturl: itemsToUpload[0].homePath,
                        contenttitle: itemsToUpload[0].name,
                    }));
                } else {
                    sakai.api.Util.notification.show(sakai.api.i18n.getValueForKey('LIBRARY'), sakai.api.Util.TemplateRenderer('addcontent_notification_finished_template', {
                        sakai: sakai,
                        uploadcount: itemsUploaded,
                        contenturl: itemsToUpload[0].homePath,
                        contenttitle: itemsToUpload[0].name,
                        uploadtocollection: false,
                        me: sakai.data.me,
                        libraryid: libraryToUploadTo,
                        librarytitle: librarytitle
                    }));
                }
            }
        };

        /////////////////////////
        // Uploading new files //
        /////////////////////////

        /**
         * Do processing on uploaded files
         * @param {Object} data The data returned from the createfile service
         */
        var postFileUpload = function(data) {
            for (var i in data) {
                if (data.hasOwnProperty(i)) {
                    for (var itemToUpload = 0; itemToUpload < itemsToUpload.length; itemToUpload++) {
                        if (itemsToUpload[itemToUpload]['sakai:originaltitle'] === i) {
                            itemsToUpload[itemToUpload] = $.extend({}, data[i].item, itemsToUpload[itemToUpload]);
                            if (data[i].type === 'imscp') {
                                setIMSCPContent(itemsToUpload[itemToUpload], data[i].item);
                            } else {
                                prepareSetDataOnContent(itemsToUpload[itemToUpload]);
                            }
                        }
                    }
                }
            }
        };

        /**
         * Execute the upload
         */
        var setXhrUpload = function() {
            var jqXHR = $('#addcontent_file_upload').fileupload('send', {
                files: filesList,
                success: function(data) {
                    data = $.parseJSON(data);
                    var extractedData = [];
                    postFileUpload(data);
                },
                error: function() {
                    checkUploadCompleted();
                }
            });
        };

        /////////////////////
        // IMS-CP Packages //
        /////////////////////

        /**
         * Run through the content of the IMS-CP package returned by the server
         * and store the page contents in proper Sakai Doc structure
         * @param {Object} documentObj    Content object that represents the original zip file upload
         * @param {Object} fileUploadObj  Content object that was returned when uploading the zip file
         */
        var setIMSCPContent = function(documentObj, fileUploadObj) {
            // Use the filename and description provided by the package
            documentObj['sakai:pooled-content-file-name'] = fileUploadObj['sakai:pooled-content-file-name'];
            documentObj['sakai:description'] = fileUploadObj['sakai:description'];
            // Set page content for all pages in the package
            var resources = $.parseJSON(documentObj.resources);
            var content = {};
            var resourceIds = {};
            for (var i = 0; i < resources.length; i++) {
                resourceIds[i] = resources[i]._id;
                var widgetId = sakai.api.Util.generateWidgetId();
                content[resourceIds[i]] = {
                    'rows': [{
                        'id': sakai.api.Util.generateWidgetId(),
                        'columns': [{
                            'width': 1,
                            'elements': [{
                                'id': widgetId,
                                'type': 'htmlblock'
                            }]
                        }]
                    }]
                };
                content[resourceIds[i]][widgetId] = {
                    'htmlblock': {
                        'content': resources[i].page
                    }
                };
            }
            finishSakaiDoc(documentObj, content);
        };

        //////////////////////////////
        // Creating a new Sakai Doc //
        //////////////////////////////

        /**
         * Creates a Sakai document
         * @param {Number} index    Index of the current Sakai Doc in the itemsToUpload array
         */
        var createDocument = function(index) {
            var documentObj = itemsToUpload[index];
            var refID = sakai.api.Util.generateWidgetId();
            var title = documentObj['sakai:pooled-content-file-name'];
            var doc = {
                'structure0': JSON.stringify({
                    'page1': {
                        '_ref': refID,
                        '_order': 0,
                        '_title': title,
                        'main': {
                            '_ref': refID,
                            '_order': 0,
                            '_title': title
                        }
                    }
                }),
                'mimeType': 'x-sakai/document',
                'sakai:schemaversion': sakai.config.schemaVersion
            };

            $.ajax({
                url: uploadPath,
                data: doc,
                type: 'POST',
                dataType: 'json',
                success: function(data) {
                    documentObj = $.extend({}, data['_contentItem'].item, documentObj);
                    itemsToUpload[index] = documentObj;
                    var content = {};
                    content[refID] = sakai.config.defaultSakaiDocContent;
                    finishSakaiDoc(documentObj, content);
                },
                error: function(err) {
                    checkUploadCompleted();
                }
            });
        };

        /**
         * Add the page content for each of the pages in the Sakai Doc
         * @param {Object} documentObj    Content object of the ZIP file that contained the package
         * @param {Object} content        Initial page content for the IMS-CP package
         */
        var finishSakaiDoc = function(documentObj, content) {
            sakai.api.Server.saveJSON('/p/' + documentObj._path, content, function() {
                var batchRequests = [];
                for (var i in content) {
                    if (content.hasOwnProperty(i)) {
                        batchRequests.push({
                            url: '/p/' + documentObj['_path'] + '/' + i + '.save.json',
                            parameters: {
                                'sling:resourceType': 'sakai/pagecontent',
                                'sakai:pagecontent': JSON.stringify(content[i]),
                                '_charset_': 'utf-8'
                            },
                            method: 'POST'
                        });
                    }
                }
                sakai.api.Server.batch(batchRequests, function(success, response) {
                     prepareSetDataOnContent(documentObj);
                });
            });
        };

        ///////////////////
        // Adding a link //
        ///////////////////

        /**
         * Upload a link
         * @param {Number} index   Index of the current link in the itemsToUpload array
         */
        var uploadLink = function(index) {
            var linkObj = itemsToUpload[index];
            var preview = sakai.api.Content.getPreviewUrl(linkObj['sakai:pooled-content-url']);
            var link = {
                'contentType': 'link',
                'link': linkObj.link,
                'name': linkObj.name,
                'description': linkObj.description,
                'visibility': linkObj.visibility,
            };

            $.ajax({
                url: uploadPath,
                data: link,
                type: 'POST',
                dataType: 'JSON',
                success: function(data) {
                    linkObj = $.extend({}, data, linkObj);
                    itemsToUpload[index] = linkObj;
                    prepareSetDataOnContent(linkObj);
                },
                error: function() {
                    checkUploadCompleted();
                }
            });
        };

        //////////////////////////////
        // General metadata setting //
        //////////////////////////////

        var prepareSetDataOnContent = function(contentObj) {
            var setContent = function(obj) {
                // TODO: Versioning

                // TODO: Tag the content
                checkUploadCompleted();
            };

            if ($.isArray(contentObj)) {
                $.each(contentObj, function(index, obj) {
                    setContent(obj);
                    lastUpload.push(obj);
                });
            } else {
                setContent(contentObj);
                lastUpload.push(contentObj);
            }
        };

        /////////////////////////////////////////////
        // Add all collected content to the system //
        /////////////////////////////////////////////

        /**
         * Execute the upload of the files in the queue by calling the functions needed for the specific type of content
         */
        var doUpload = function() {
            sakai.api.Util.progressIndicator.showProgressIndicator(sakai.api.i18n.getValueForKey('UPLOADING_YOUR_CONTENT'), sakai.api.i18n.getValueForKey('PROCESSING_UPLOAD'));
            libraryToUploadTo = $(addcontentSaveTo).val();

            // If iframe transport is used we have to submit the file upload forms
            if (useIframeTransport) {
                $.each(filesList, function(i, val) {
                    if (fileUploadForms[val.name]) {
                        fileUploadForms[val.name].submit();
                    }
                });
            }

            $.each(itemsToUpload, function(index,item) {
                switch(item.type) {
                    case 'link':
                        uploadLink(index);
                        break;
                    case 'content':
                        if (!contentUploaded) {
                            if (!useIframeTransport) {
                                setXhrUpload();
                            }
                            contentUploaded = true;
                        }
                        break;
                    case 'document':
                        createDocument(index);
                        break;
                }
            });
        };

        /**
         * Prefill some of the extra data a file can have
         * @param {String} fileName Name of the selected file
         */
        var preFillContentFields = function(fileName) {
            if (fileName.indexOf('\\') !== -1) {
                fileName = fileName.split('\\')[fileName.split('\\').length - 1];
            }
            $(addcontentUploadContentFields + ' ' + addcontentUploadContentTitle).val(fileName);
            $(addcontentUploadContentFields + ' ' + addcontentUploadContentOriginalTitle)[0].id = fileName;
            $(addcontentUploadContentTitle).select();
        };


        ///////////////
        // RENDERING //
        ///////////////

        /**
         * Show a selected navigation item
         * @param {Object} $selected Selected navigation item
         */
        var showSelectedItem = function($selected) {
            $addcontentNewItemContainer.hide();
            $selected.show();
        };

        /**
         * Show the interface to upload new content
         */
        var renderUploadNewContent = function() {
            showSelectedItem($(addcontentUploadContentTemplate));
            $('#addcontent_upload_content_copyright_container').html(sakai.api.Util.TemplateRenderer('addcontent_copyright_template', {
                copyright: sakai.config.Permissions.Copyright,
                copyright_default: sakai.config.Permissions.Copyright.defaults['content'],
                sakai: sakai
            }));
            if ( !autoSuggestElts[ 'new_content' ] ) {
                autoSuggestElts[ 'new_content' ] = $( addcontentUploadContentTags );
            }
            $autoSuggestElt = autoSuggestElts[ 'new_content' ];
            $autoSuggestListCatElt = $( '.list_categories', '#addcontent_upload_content_fields' );
            sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest( $autoSuggestElt, null, $autoSuggestListCatElt );
            $('#addcontent_container_lhchoice').find('a:first').focus();
        };

        /**
         * Show the interface to add a new document
         */
        var renderNewDocument = function() {
            if ($.trim($(addcontentAddDocumentTitle).val()) !== '') {
                enableAddToQueue();
            }
            showSelectedItem($(addcontentAddDocumentTemplate));

            if ( !autoSuggestElts[ 'new_document' ] ) {
                autoSuggestElts[ 'new_document' ] = $( addcontentAddDocumentTags );
            }
            $autoSuggestElt = autoSuggestElts[ 'new_document' ];
            $autoSuggestListCatElt = $( '.list_categories', '#addcontent_add_document_form' );
            sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest( $autoSuggestElt, null, $autoSuggestListCatElt );
        };

        /**
         * Show the interface to add a link
         */
        var renderAddLink = function() {
            if ($.trim($(addcontentAddLinkURL).val()) !== '') {
                enableAddToQueue();
            }
            showSelectedItem($(addcontentAddLinkTemplate));

            if ( !autoSuggestElts[ 'new_link' ] ) {
                autoSuggestElts[ 'new_link' ] = $( addcontentAddLinkTags );
            }

            $autoSuggestElt = autoSuggestElts[ 'new_link' ];
            $autoSuggestListCatElt = $( '.list_categories', '#addcontent_add_link_form' );
            sakai.api.Util.AutoSuggest.setupTagAndCategoryAutosuggest( $autoSuggestElt, null, $autoSuggestListCatElt );
        };

        ////////////////
        // NAVIGATION //
        ////////////////

        /**
         * Reset the menu to its original state
         */
        var resetMenu = function() {
            $addcontentContainerNewItem.removeClass(addcontentContainerNewItemExtraRoundedBorderClass);
            $addcontentContainerLHChoiceItem.removeClass(addcontentContainerLHChoiceSelectedItem);
            $('#addcontent_upload_content').addClass(addcontentContainerLHChoiceSelectedItem);

            if (sakai.config.Permissions.Content.defaultaccess) {
                $('#addcontent_upload_content_permissions [value=' + sakai.config.Permissions.Content.defaultaccess + ']').attr('selected', 'selected');
            }
            if (sakai.config.Permissions.Documents.defaultaccess) {
                $('#addcontent_add_document_permissions [value=' + sakai.config.Permissions.Documents.defaultaccess + ']').attr('selected', 'selected');
            }
        };

        /**
         * Decide what to render when the menu is navigated
         * Add/remove some CSS classes to show/hide rounded borders etc.
         */
        var navigateMenu = function() {
            disableAddToQueue();
            $addcontentContainerNewItemRaquoRight.removeClass(addcontentContainerNewItemRaquoRightDocumentsposition);
            $addcontentContainerNewItemAddToList.removeClass(addcontentContainerNewItemAddToListDocumentsposition);
            $addcontentContainerNewItemAddToList.removeClass(addcontentContainerNewItemAddToListUploadNewContent);
            $addcontentContainerNewItemAddToList.removeClass(addcontentContainerNewItemAddToListAddLink);
            if ($(this).prev().hasClass(addcontentContainerLHChoiceItemClass)) {
                $addcontentContainerNewItem.addClass(addcontentContainerNewItemExtraRoundedBorderClass);
            }
            else {
                $addcontentContainerNewItem.removeClass(addcontentContainerNewItemExtraRoundedBorderClass);
            }
            $addcontentContainerLHChoiceItem.removeClass(addcontentContainerLHChoiceSelectedItem);
            $(this).addClass(addcontentContainerLHChoiceSelectedItem);

            switch ($(this)[0].id) {
                case 'addcontent_upload_content':
                    renderUploadNewContent();
                    $addcontentContainerNewItemAddToList.addClass(addcontentContainerNewItemAddToListUploadNewContent);
                    break;
                case 'addcontent_new_document':
                    renderNewDocument();
                    $addcontentContainerNewItemRaquoRight.addClass(addcontentContainerNewItemRaquoRightDocumentsposition);
                    $addcontentContainerNewItemAddToList.addClass(addcontentContainerNewItemAddToListDocumentsposition);
                    break;
                case 'addcontent_add_link':
                    renderAddLink();
                    $addcontentContainerNewItemAddToList.addClass(addcontentContainerNewItemAddToListAddLink);
                    break;
            }
        };

        /**
         * Executed when a subitem in the navigation has been clicked
         */
        var navigateSubItem = function() {
            $(addcontentContainerLHChoiceSelectedSubitem).removeClass(addcontentContainerLHChoiceSelectedSubitemClass);
            $(this).addClass(addcontentContainerLHChoiceSelectedSubitemClass);
        };

        /////////////
        // BINDING //
        /////////////

        /**
         * Remove binding on all elements
         */
        var removeBinding = function() {
            $addcontentContainerLHChoiceItem.off('click', navigateMenu);
            $addcontentContainerLHChoiceSubItem.off('click', navigateSubItem);
            $addcontentContainerNewItemAddToList.off('click', constructItemToAdd);
            $(addcontentContainerStartUploadButton).off('click', doUpload);
            $addcontentContainer.off('click', addcontentSelectedItemsEditDataClose, closeEditData);
            $addcontentContainer.off('click', addcontentContainerNewItemSaveChanges, saveEdit);
            $addcontentContainer.off('click', addcontentSelectedItemsRemove, removeItemToAdd);
            $addcontentContainer.off('click', addcontentSelectedItemsActionsPermissions, changePermissions);
            $addcontentContainer.off('click', addcontentSelectedItemsActionsEdit, editData);
            $(window).off('init.deletecontent.sakai', deleteContent);
        };

        /**
         * Add binding to all elements
         */
        var addBinding = function() {
            $addcontentContainerLHChoiceItem.on('click', navigateMenu);
            $addcontentContainerLHChoiceSubItem.on('click', navigateSubItem);
            $addcontentContainerNewItemAddToList.on('click', constructItemToAdd);
            $(addcontentContainerStartUploadButton).on('click', doUpload);
            $addcontentContainer.on('click', addcontentSelectedItemsEditDataClose, closeEditData);
            $addcontentContainer.on('click', addcontentContainerNewItemSaveChanges, saveEdit);
            $addcontentContainer.on('click', addcontentSelectedItemsRemove, removeItemToAdd);
            $addcontentContainer.on('click', addcontentSelectedItemsActionsPermissions, changePermissions);
            $addcontentContainer.on('click', addcontentSelectedItemsActionsEdit, editData);
            sakai.api.Util.hideOnClickOut($addcontentSelecteditemsEditDataContainer, addcontentSelectedItemsActionsEdit + ', #assignlocation_container');
            sakai.api.Util.hideOnClickOut($addcontentSelectedItemsEditPermissionsContainer, addcontentSelectedItemsActionsPermissions);

            // Initialize the validate plug-in
            var linkValidateOpts = {
                onclick: true,
                onfocusout: true,
                success: enableAddToQueue,
                error: disableAddToQueue
            };

            sakai.api.Util.Forms.validate($addcontentAddLinkForm, linkValidateOpts, true);

            // Need to create one validation opts object per validation
            // I tried $.extend()'ing the previous one, but the callbacks won't fire
            var documentValidateOpts = {
                onclick: true,
                onkeyup: function(element) { $(element).valid(); },
                onfocusout: true,
                success: enableAddToQueue,
                error: disableAddToQueue
            };

            sakai.api.Util.Forms.validate($(addcontentAddDocumentForm), documentValidateOpts, true);

            var fileuploadOptions = {
                url: uploadPath,
                sequentialUploads: true,
                singleFileUploads: false,
                dropZone: $('#addcontent_container_selecteditems'),
                drop: function(ev, data) {
                    ev.stopPropagation();
                    ev.preventDefault();
                    // We only support browsers that have XMLHttpRequest Level 2
                    if (!window.FormData) {
                        return false;
                    }
                    if ($(ev.target).is($('#addcontent_file_upload'))) {
                        var error = false;
                        $.each(data.files, function(index, file) {
                            if (file.size > 0) {
                                fileDropped(file);
                            } else {
                                error = true;
                            }
                        });
                        if (error) {
                            sakai.api.Util.notification.show(
                                sakai.api.i18n.getValueForKey('DRAG_AND_DROP_ERROR', 'addcontent'),
                                sakai.api.i18n.getValueForKey('ONE_OR_MORE_DROPPED_FILES_HAS_AN_ERROR', 'addcontent'));
                        }
                        renderQueue();
                    }
                },
                change: function(e, data) {
                    multifileQueueAddAllowed = false;
                    preFillContentFields(data.files[0].name);
                    enableAddToQueue();
                },
                add: function(e, data) {
                    tmpBrowsedFile = data.files[0];
                    if (useIframeTransport) {
                        fileUploadForms[data.files[0].name] = data;
                    }
                }
            };

            if (useIframeTransport) {
                fileuploadOptions.done = function(e, data) {
                    var result = {};
                    // In IE the result is inserted to the iframe
                    if ($('pre', data.result).length) {
                        result = $.parseJSON($('pre', data.result).text());
                    } else {
                        result = $.parseJSON(data.result);
                    }
                    postFileUpload(result);
                };
            }

            $('#addcontent_file_upload').fileupload(fileuploadOptions);

            $(document).on('done.deletecontent.sakai', deleteContent);
        };

        ////////////////////
        // INITIALIZATION //
        ////////////////////

        var setCurrentlySelectedLibrary = function() {
            if (sakai_global.group && sakai_global.group.groupId) {
                currentSelectedLibrary = sakai_global.group.groupId;
            } else if (sakai_global.content_profile && sakai_global.content_profile.content_data && sakai_global.content_profile.content_data.data &&
                sakai.api.Content.Collections.isCollection(sakai_global.content_profile.content_data.data)) {
                currentSelectedLibrary = sakai.api.Content.Collections.getCollectionGroupId(sakai_global.content_profile.content_data.data);
            }
        };

        /**
         * Initialize the modal dialog
         */
        var initializeJQM = function() {
            sakai.api.Util.Modal.setup($addcontentContainer, {
                modal: true,
                overlay: 20,
                zIndex: 4001,
                toTop: true,
                onHide: function(hash) {
                    uncheckCheckboxes();
                    hash.o.remove();
                    hash.w.hide();
                }
            });
            sakai.api.Util.Modal.open($addcontentContainer);
        };

        /**
         * Call all functions and reset all variables needed to get the widget
         * into the original startup state
         */
        var resetWidget = function() {
            removeBinding();
            resetQueue();
            resetMenu();
            disableAddToQueue();
            disableStartUpload();
            multifileQueueAddAllowed = true;
            contentUploaded = false;
            hideAfterContentUpload = false;
            numberOfBrowsedFiles = 0;
            fileUploadForms = {};
        };

        /**
         * Initialize the widget
         */
        var initialize = function() {
            setCurrentlySelectedLibrary();
            initializeJQM();
            resetWidget();
            addBinding();
            renderUploadNewContent();
        };

        ////////////
        // EVENTS //
        ////////////

        $(document).on('init.addcontent.sakai', initialize);
        $(document).on('click', '.sakai_add_content_overlay', initialize);

    };
});