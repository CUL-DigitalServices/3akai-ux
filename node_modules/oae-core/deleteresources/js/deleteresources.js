/*!
 * Copyright 2013 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function ($, oae) {

    return function (uid) {

        // The widget container
        var $rootel = $('#' + uid);

        // Variables that will keep track of the resourceType of the resource(s) being shared (i.e. `content`, `discussion`)
        var resourceType = null;

        // Variable that will keep track of the current page context.
        // This can be a user or a group.
        var contextProfile = null;

        // Variable that will keep track of the resources to delete
        var selectedResources = [];

        // Variable that will keep track of all the resources that should be deleted from the system
        var resourcesToDeleteFromSystem = [];

        // This array will hold all the resource profiles that should be removed from the library
        var resourcesToDeleteFromLibrary = [];

        ///////////////
        // UTILITIES //
        ///////////////

        /**
         * Resets the state of the widget when the modal dialog has been closed
         */
        var setUpReset = function() {
            $('#deleteresources-modal').on('hidden', function(ev) {
                // Reset the selected resources
                selectedResources = [];
                resourcesToDelete = [];
                resourcesToRemoveFromLibrary = [];

                // Reset the progress bar
                updateProgress(0);

                // Show the first step
                $('#deleteresources-overview-container', $rootel).hide();
                $('#deleteresources-progress-container', $rootel).show();

                // Reset the modal title
                $('#deleteresources-modal-title', $rootel).empty();
            });
        };

        /**
         * Updates the progress indicator
         *
         * @param  {Number}   progress   Number between 0 and 100 indicating progress
         */
        var updateProgress = function(progress) {
            $('.bar', $rootel).css('width', progress + '%');
        };

        /**
         * Sets the title of the modal
         *
         * @param  {String}     view     The view for which a title should be shown. The accepted values are `gathering`, `overview` and `deleting`
         */
        var setModalTitle = function(view) {
            oae.api.util.template().render($('#deleteresources-modal-title-template', $rootel), {
                'resourceType': resourceType,
                'resourceSubType': selectedResources[0].resourceSubType,
                'view': view
            });
        };

        ///////////////////////
        // REMOVAL FUNCTIONS //
        ///////////////////////

        /**
         * Shows a success or failure notification when the resources have been removed.
         *
         * @param  {Number}   errCount   The number of errors that occurred during the removal.
         */
        var showCompleteNotification = function(errCount) {
            // Render and show the notification
            var notificationTitle = oae.api.util.template().render($('#deleteresources-notification-title-template', $rootel), {
                'errCount': errCount,
                'context': principal,
                'resources': selectedItems
            });

            var notificationBody = oae.api.util.template().render($('#deleteresources-notification-body-template', $rootel), {
                'errCount': errCount,
                'context': principal,
                'resources': selectedItems
            });

            oae.api.util.notification(notificationTitle, notificationBody, errCount ? 'error' : 'success');
            $('#deleteresources-modal', $rootel).modal('hide');
            $(document).trigger('oae.deleteresources.done');
        };

        /**
         * Hard delete a resource.
         *
         * @param  {Object}     resource            The resource that needs to be hard deleted.
         * @param  {Function}   callback            A standard callback method that gets executed when the resource has been deleted.
         * @param  {Object}     [callback.err]      An error object (if any.)
         */
        var deleteResource = function(resource, callback) {
            if (resource.resourceType === 'content') {
                oae.api.content.deleteContent(resource.id, callback);
            } else if (resource.resourceType === 'discussion') {
                oae.api.discussion.deleteDiscussion(resource.id, callback);
            }
        };

        /**
         * Removes a resource from a library.
         *
         * @param  {Object}     resource            The resource that needs to be removed from the library.
         * @param  {Function}   callback            A standard callback method that gets executed when the resource has been removed from the library.
         * @param  {Object}     [callback.err]      An error object (if any.)
         */
        var removeResourceFromLibrary = function(resource, callback) {
            if (resource.resourceType === 'content') {
                oae.api.content.removeContentFromLibrary(principal.id, resource.id, callback);
            } else if (resource.resourceType === 'discussion') {
                oae.api.discussion.removeDiscussionFromLibrary(principal.id, resource.id, callback);
            }
        };

        /**
         * Start removing resources.
         * This will show the progress bar and remove all resources from the library or
         * hard delete them.
         */
        var startRemoval = function() {
            var resourcesRemoved = 0;
            var errCount = 0;
            updateProgress(resourcesRemoved, selectedItems.length, '__MSG__REMOVING_X_OF_N__');
            $('#deleteresources-view-list-container', $rootel).hide();
            $('#deleteresources-view-progress-container', $rootel).show();


            /*!
             * A handler that gets called when a resource is removed.
             * It will display the appropriate notifications, send out the correct event
             * and close the modal when all resources have been removed.
             *
             * @param  {Object}     err     An error object if the request errored out.
             */
            var resourceCallback = function(err) {
                if (err) {
                    errCount++;
                }

                resourcesRemoved++;
                updateProgress(resourcesRemoved, selectedItems.length, '__MSG__REMOVING_X_OF_N__');

                if (resourcesToRemoveFromLibrary.length !== 0) {
                    removeResourceFromLibrary(resourcesToRemoveFromLibrary.pop(), resourceCallback);
                } else if (resourcesToDelete.length !== 0) {
                    deleteResource(resourcesToDelete.pop(), resourceCallback);
                } else {
                    // We're done.
                    showCompleteNotification(errCount);
                }
            };

            // Sequentially remove/delete all resources.
            if (resourcesToRemoveFromLibrary.length !== 0) {
                removeResourceFromLibrary(resourcesToRemoveFromLibrary.pop(), resourceCallback);
            } else if (resourcesToDelete.length !== 0) {
                deleteResource(resourcesToDelete.pop(), resourceCallback);
            }
        };


        ///////////////
        // LIST VIEW //
        ///////////////

        /**
         * Renders the listview.
         *
         * @param  {Object[]}   resourcesToRender       An array of resources that should be displayed in a list.
         * @param  {Boolean}    showRemoveAndDelete     Whether to show the split view with a 'remove from library' and a 'delete resource' button or just the 'remove from library' button.
         * @param  {String}     [notificationMessage]   An optional notification message.
         */
        var renderListView = function(resourcesToRender, showRemoveAndDelete, notificationMessage) {
            oae.api.util.template().render($('#deleteresources-template', $rootel), {
                'resources': resourcesToRender,
                'showRemoveAndDelete': showRemoveAndDelete,
                'notificationMessage': notificationMessage
            }, $('#deleteresources-view-list-container', $rootel));

            $('#deleteresources-view-progress-container', $rootel).hide();
            $('#deleteresources-view-list-container', $rootel).show();
        };

        /**
         * Shows the view where the user can manage all of the resources.
         */
        var showCanManageAllView = function() {
            renderListView(selectedProfiles, true);

            // Add the appropriate bindings
            $('#deleteresources-managed-remove', $rootel).on('click', function() {
                resourcesToRemoveFromLibrary = selectedProfiles;
                startRemoval();
            });
            $('#deleteresources-managed-delete', $rootel).on('click', function() {
                resourcesToDelete = selectedProfiles;
                startRemoval();
            });
        };

        /**
         * Shows the view where the user can manage some of the resources.
         */
        var showCanManageSomeView = function() {
            // Step 1: Show the items he cannot manage.
            var notificationMessage = oae.api.i18n.translate('__MSG__STEP_1_OF_2__', 'deleteresources');
            resourcesToRemoveFromLibrary = _.filter(selectedProfiles, function(profile) { return !profile.isManager; });
            renderListView(resourcesToRemoveFromLibrary, false, notificationMessage);

            $('#deleteresources-unmanaged-remove', $rootel).on('click', function() {
                // Show step 2.
                var notificationMessage = oae.api.i18n.translate('__MSG__STEP_2_OF_2__', 'deleteresources');
                var managedResources = _.filter(selectedProfiles, function(profile) { return profile.isManager; });
                renderListView(managedResources, true, notificationMessage);

                $('#deleteresources-managed-remove', $rootel).on('click', function() {
                    resourcesToRemoveFromLibrary = resourcesToRemoveFromLibrary.concat(managedResources);
                    startRemoval();
                });
                $('#deleteresources-managed-delete', $rootel).on('click', function() {
                    resourcesToDelete = managedResources;
                    startRemoval();
                });
            });
        };

        /**
         * Shows the view where the user can manage none of the resources.
         */
        var showCanManageNoneView = function() {
            renderListView(selectedProfiles, false);
            resourcesToRemoveFromLibrary = selectedProfiles;

            // Start the removal process when the 'Remove from Library' button is clicked.
            $('#deleteresources-unmanaged-remove', $rootel).on('click', startRemoval);
        };


        /**
         * Depending on whether or not the current user has manage rights on some of the resources
         * we show a different view:
         *     -    The current user is a viewer of all the resources
         *     -    The current user is a manager of all the resources
         *     -    The current user can manage some of the items.
         */
        var showListView = function() {
            // Determine if we can manage all, some or none of the content.
            var canManageAll = true;
            var canManageSome = false;
            $.each(selectedProfiles, function(i, contentProfile) {
                canManageAll = canManageAll && contentProfile.isManager;
                canManageSome = canManageSome || contentProfile.isManager;
            });
            var canManageNone = (!canManageAll && !canManageSome);

            setTitle('__MSG__REMOVE__');
            if (canManageAll) {
                showCanManageAllView();
            } else if (canManageSome) {
                showCanManageSomeView();
            } else {
                showCanManageNoneView();
            }
        };


        ////////////////////
        // GATHERING VIEW //
        ////////////////////

        /**
         * Get the profile for a resource
         *
         * @param  {Object}     item                The resource that should be retrieved. Should at least have an `id` and a `resourceType`.
         * @param  {Function}   callback            Standard callback function.
         * @param  {Object}     callback.err        Standard error object.
         * @param  {Object}     callback.profile    The profile for the resource.
         */
        var getResourceProfile = function(item, callback) {
            if (item.resourceType === 'content') {
                oae.api.content.getContent(item.id, callback);
            } else if (item.resourceType === 'discussion') {
                oae.api.discussion.getDiscussion(item.id, callback);
            }
        };

        /**
         * Shows the gathering view and starts fetching the profiles.
         */
        var gatherProfiles = function() {
            //setModalTitle('gathering');
            //updateProgress(0, selectedItems.length, '__MSG__GATHERED_X_OF_N__');
            //$('#deleteresources-view-progress-container', $rootel).show();

            //selectedProfiles = [];


            /*!
             * A handler that gets called when a resource's profile is retrieved.
             *
             * @param  {Object}     err         An error object if the request errored out.
             * @param  {Object}     resource    The retrieved resource profile.
             */
            var getProfileCallback = function(err, resource) {
                if (err) {
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__RETRIEVAL_ERROR__', 'deleteresources'),
                        oae.api.i18n.translate('__MSG__GATHERING_PROFILES_FAILED__', 'deleteresources', {'displayName': selectedItem.displayName}),
                        'error');
                } else {
                    selectedProfiles.push(resource);
                    updateProgress(selectedProfiles.length, selectedItems.length, '__MSG__GATHERED_X_OF_N__');

                    if (selectedProfiles.length < selectedItems.length) {
                        // Get the next item.
                        getResourceProfile(selectedItems[selectedProfiles.length], getProfileCallback);
                    } else {
                        // All profiles have been retrieved, show the correct list view.
                        //showListView();
                    }
                }
            };

            getResourceProfile(selectedItems[0], getProfileCallback);
        };


        ////////////////////
        // INITIALIZATION //
        ////////////////////

        /**
         * Initializes the delete resources modal dialog
         */
        var setUpDeleteResourcesModal = function() {
            $(document).on('click', '.oae-trigger-deleteresources', function() {
                $('#deleteresources-modal', $rootel).modal();
                // The resourceType data attribute should be available on all delete content triggers
                // and will tell us what type of resource is being deleted (i.e., content, discussion)
                resourceType = $(this).attr('data-resourceType');
                // Get the context in which we're executing.
                $(document).trigger('oae.context.get', 'deleteresources');
            });

            $(document).on('oae.context.send.deleteresources', function(ev, context) {
                principal = context;

                // Get the selected items from the list.
                $(document).trigger('oae.list.getSelection', 'deleteresources');
            });

            $(document).on('oae.list.sendSelection.deleteresources', function(ev, context) {
                selectedItems = context.results;

                // Gather the content profiles.
                gatherProfiles();
            });
        };

        setUpReset();
        setUpDeleteResourcesModal();

    };
});
