/* Just a placeholder for now. */
.documentpreview-container {
    margin-left: auto;
    margin-right: auto;
    width: 1036px;
}

/*
  User controls for the page preview are contained in a toolbar.
*/

.documentpreview-container
.dp-toolbar {
    width: 100%;
    background-color: #ebe7e2;
    color: #646464;
    padding: 8px 0;
    -webkit-border-radius: 5px;
       -moz-border-radius: 5px;
            border-radius: 5px;
}

/*
  There are two sections of controls within the toolbar. They're
  positioned on either side of the bar. By default we assume a
  left-to-right language, though we'll override that for "rtl"
  in a minute.
*/
.documentpreview-container
.dp-toolbar
.dp-zoom-level {
    float: left;
    padding-left: 20px;
}
.documentpreview-container
.dp-toolbar
.dp-page-position {
    float: right;
    padding-right: 20px;
}
html[dir="rtl"]
.documentpreview-container
.dp-toolbar
.dp-zoom-level {
    float: right;
    padding-right: 20px;
}
html[dir="rtl"]
.documentpreview-container
.dp-toolbar
.dp-page-position {
    float: left;
    padding-left: 20px;
}

/*
  To make the invidual controls blend into the toolbar, we need to
  undo the standard `<button>` styles. We also need to add a small
  top margin because normal OAE buttons are 28px high, while the
  `<input>` element has a `min-height` of 30px. Shifting the buttons
  down 1 pixel vertically aligns them with the `<input>`.
*/
.documentpreview-container
.dp-toolbar
button {
    background: none;
    border: none;
    color: #646464;
    margin-top: 1px;
}

/*
  And since we don't have the normal `<button>` styling to highlight
  clickability, add a subtle hover effect.
*/
.documentpreview-container
.dp-toolbar
button:hover,
.documentpreview-container
.dp-toolbar
button:focus {
    color: black;
}

/*
  If we're at either extreme (page number or zoom level) then
  at least one button has no effect. The `disabled` class mutes
  that button.
*/
.documentpreview-container
.dp-toolbar
button.disabled,
.documentpreview-container
.dp-toolbar
button.disabled:hover,
.documentpreview-container
.dp-toolbar
button.disabled:focus {
    color: #bbbbbb;
    cursor: default;
}

/*
  Since support for HTML5 Full Screen mode isn't universal, we'll
  default to not showing that control. JavaScript can check to see
  if full screen is avaiable and, if so, add the `"supported"`
  class to the button to make it visible.
*/

.documentpreview-container
.dp-toolbar
.dp-full-screen {
    display: none;
}

.documentpreview-container
.dp-toolbar
.dp-full-screen.supported {
    display: inline-block;
}

/*
  The `<input>` element in the toolbar only needs to be large enough
  to hold a page number. We also need to undo some of the bootstrap
  styles to fix the alignment within the toolbar.
*/
.documentpreview-container
.dp-toolbar
input.dp-page-num {
    width: 40px;
    margin: 0;
}

/*
  Any text within the toolbar also needs to be pushed down to match
  the vertical alignment of the buttons and input controls.
*/
.documentpreview-container
.dp-toolbar
.dp-toolbar-text {
    position: relative;
    top: 1px;
}

/*
  For right-to-left languages we need to reverse the default convention
  (previous = left-facing arrow and next = right-facing arrow). This is
  a bit ugly since it's dependent on the specific implementation of
  Font Awesome. We can hope that future releases are backwards-compatible.
  If not, this will need adjustment.
*/

html[dir="rtl"]
.documentpreview-container
.dp-toolbar
.dp-page-prev
.icon-caret-left:before {
    content: "\f0da";
}
html[dir="rtl"]
.documentpreview-container
.dp-toolbar
.dp-page-next
.icon-caret-right:before {
    content: "\f0d9";
}

/*
  Also to accomodate right-to-left languages, we set the display property
  of `<span>` elements in the toolbar to inline-block. This has no effect
  for left-to-right languages, but it will allow the browser to reorder
  the content appropriately in rtl mode.
*/

.documentpreview-container
.dp-toolbar
span {
  display: inline-block;
}

/*
  The page content itself lives in its own container. We don't have to do
  too much styling here, since the PDF2HTML utility generates both generic
  style sheets and a style sheet tailored to the specific document. We do
  need to limit the height of the container, though, since the OAE shows
  comments below the document.
*/

.documentpreview-container
.dp-content {
    overflow: auto;
    position: relative;
    max-height: 1351px; /* just a stub value for now */
}

/*
  We need to make sure that each page remains confined to the overall
  content container, even when the zoom level might otherwise cause
  it to be bigger than that container. We can also add a nice
  transition effect for zoom changes.
*/

.documentpreview-container
.dp-content
.dp-content-page {
    -webkit-transition: -webkit-transform .2s ease-in-out;
       -moz-transition: -moz-transform .2s ease-in-out;
        -ms-transition: -ms-transform .2s ease-in-out;
         -o-transition: -o-transform .2s ease-in-out;
            transition: transform .2s ease-in-out;
    -webkit-transition: height .2s ease-in-out;
       -moz-transition: height .2s ease-in-out;
        -ms-transition: height .2s ease-in-out;
         -o-transition: height .2s ease-in-out;
            transition: height .2s ease-in-out;
}

/*
  While a page is loading, give some indication of progress.
  For now we just use text, but it should be enhanced
  with an animated icon.
*/

.documentpreview-container
.dp-content
.dp-content-page.loading:before {
    content: "Loadingâ€¦";
    font-size: 20px;
    font-style: normal;
    font-weight: normal;
    height: 40px;
    vertical-align: middle;
    line-height: normal;
 }

 
/*
  The zoom level of the preview is controlled by a `data-` attribute.
  In addition to controlling the scale, we also need to adjust the
  overflow property. If the zoom level is less than 100%, then overflow
  must be visible since the container (which is scaled) will be smaller
  than the content, and we need the content to show. If the zoom level
  is more than 100%, however, then the content should be limited by
  the container.
*/

.documentpreview-container
.dp-content[data-zoom="50"]
.dp-content-page {
    overflow: visible;
    -webkit-transform: scale(0.50);
       -moz-transform: scale(0.50);
        -ms-transform: scale(0.50);
         -o-transform: scale(0.50);
            transform: scale(0.50);
}
.documentpreview-container
.dp-content[data-zoom="75"]
.dp-content-page {
    overflow: visible;
    -webkit-transform: scale(0.75);
       -moz-transform: scale(0.75);
        -ms-transform: scale(0.75);
         -o-transform: scale(0.75);
            transform: scale(0.75);
}
.documentpreview-container
.dp-content[data-zoom="90"]
.dp-content-page {
    overflow: visible;
    -webkit-transform: scale(0.90);
       -moz-transform: scale(0.90);
        -ms-transform: scale(0.90);
         -o-transform: scale(0.90);
            transform: scale(0.90);
}
.documentpreview-container
.dp-content[data-zoom="100"]
.dp-content-page {
    overflow: visible;
    -webkit-transform: scale(1.00);
       -moz-transform: scale(1.00);
        -ms-transform: scale(1.00);
         -o-transform: scale(1.00);
            transform: scale(1.00);
}
.documentpreview-container
.dp-content[data-zoom="110"]
.dp-content-page {
    overflow: hidden;
    -webkit-transform: scale(1.10);
       -moz-transform: scale(1.10);
        -ms-transform: scale(1.10);
         -o-transform: scale(1.10);
            transform: scale(1.10);
}
.documentpreview-container
.dp-content[data-zoom="125"]
.dp-content-page {
    overflow: hidden;
    -webkit-transform: scale(1.25);
       -moz-transform: scale(1.25);
        -ms-transform: scale(1.25);
         -o-transform: scale(1.25);
            transform: scale(1.25);
}
.documentpreview-container
.dp-content[data-zoom="150"]
.dp-content-page {
    overflow: hidden;
    -webkit-transform: scale(1.50);
       -moz-transform: scale(1.50);
        -ms-transform: scale(1.50);
         -o-transform: scale(1.50);
            transform: scale(1.50);
}
.documentpreview-container
.dp-content[data-zoom="200"]
.dp-content-page {
    overflow: hidden;
    -webkit-transform: scale(2.00);
       -moz-transform: scale(2.00);
        -ms-transform: scale(2.00);
         -o-transform: scale(2.00);
            transform: scale(2.00);
}
