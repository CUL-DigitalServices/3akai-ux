/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'underscore', 'oae.core', 'lazyload'], function($, _, oae) {

    return function(uid, showSettings, widgetData) {

        // Supported zoom levels listed in sorted order
        var ZOOMLEVELS = [0.5, 0.75, 0.9, 1, 1.1, 1.25, 1.50, 2, 5];

        // How close to page top before page is "in view"
        // TODO
        var PAGEVIEWCUSION = 1;

        // The widget container
        var $rootel = $('#' + uid);

        // Variable that will keep track of the current interaction
        // state of the widget
        // TODO
        var state = {
            'zoomLevel': 1,
            'pageNumber': 1
        };

        // Variable to store the array of pages in the document
        var pages = [];

        // Number of pages loaded so far
        var lastPageLoaded = 0;

        // Which pages are currently in view
        var pagesInView = [];

        // Whether or not pages are being preloaded to
        // TODO
        var isPreloading = false;

        // TODO
        var contentWidth = 0;


        ///////////////////////////////
        // Cached Element References //
        ///////////////////////////////

        var $content = $('.documentpreview-content', $rootel);
        var $zoomIn = $('.documentpreview-zoom-in', $rootel);
        var $zoomOut = $('.documentpreview-zoom-out', $rootel);
        var $fullScreen = $('.documentpreview-full-screen', $rootel);
        var $prevPage = $('.documentpreview-page-prev', $rootel);
        var $pageNumber = $('.documentpreview-page-num', $rootel);
        var $nextPage = $('.documentpreview-page-next', $rootel);


        ////////////////////////////////
        // Page loading and rendering //
        ////////////////////////////////

        /**
         * Load a document page and append it to the document viewer
         *
         * @param  {Object}         page                Page object representing the page that needs to be loaded and rendered
         * @param  {Function}       callback            Standard callback function
         */
        var loadPage = function(page, callback) {
            // Set a default callback function in case no callback function has been provided
            callback = callback || function() {};

            // Keep track of the last page in the document that was loaded
            lastPageLoaded = page.pageNumber;

            // Add the page container, containing a loading indicator
            $content.append(oae.api.util.template().render('#documentpreview-content-page-template', {
                'pageNumber': page.pageNumber
            }));
            // Cache a reference to the page element
            page.$el = $('.documentpreview-content-page[data-page-number="' + page.pageNumber + '"]', $rootel);

            // Request the page content
            $.ajax({
                'url': constructDocumentPreviewURL('page.' + page.pageNumber + '.html'),
                'dataType': 'text',
                'success': function(response) {
                    // Replace the loading indicator with the page content
                    page.$el.html(response);

                    // Store the base height of the page element, as this will need to be
                    // adjusted based on the zoom level
                    page.height = $(':first-child', page.$el).height();
                    // Adjust the page display to reflect the current zoom level
                    zoomPage(page);

                    // Keep track of the fact that this page has been loaded, so it is
                    // not unneccesarily reloaded later on
                    page.loaded = true;

                    callback();
                }
            });
        };

        /**
         * Construct a signed URL for one of the document resources
         *
         * @param  {String}     resourceName        Name of the document resource for which a signed URL needs to be constructed
         * @return {String}                         Signed URL for the requested document resource
         */
        var constructDocumentPreviewURL = function(resourceName) {
            return '/api/content/' + widgetData.id +
                   '/revisions/' + widgetData.latestRevisionId +
                   '/previews/' + resourceName +
                   '?signature=' + widgetData.signature.signature +
                   '&expires=' + widgetData.signature.expires +
                   '&lastmodified=' + widgetData.signature.lastModified;
        };


        ////////////////////////
        // Infinite scrolling //
        ////////////////////////

        /////////////
        // Toolbar //
        /////////////

        /**
         * Update the toolbar to reflect the current document viewer state
         * TODO
         */
        var refreshToolbar = function() {
            // Enable/disable controls as appropriate
            var zoomIndex = _.indexOf(ZOOMLEVELS, state.zoomLevel);
            $zoomOut.prop('disabled', (zoomIndex <= 0));
            $zoomIn.prop('disabled', (zoomIndex >= (ZOOMLEVELS.length - 1)));
            $nextPage.prop('disabled', (state.pageNumber >= widgetData.previews.pageCount));

            // Indicate the page that is currently showing
            $pageNumber.val(state.pageNumber);
        };


        /////////////////////
        // Page navigation //
        /////////////////////

        //////////
        // Zoom //
        //////////

        /////////////////
        // Full screen //
        /////////////////

        /**
         * Show the document in full screen mode when it is currently showing in regular mode, or return
         * the document to regular mode when the document is showing in full screen mode
         */
        var toggleFullscreen = function() {
            isFullscreenActive() ? deactivateFullscreen() : activateFullscreen();
        };

        /**
         * Check whether or not the document is currently being dislayed
         * in full screen mode
         *
         * @return {Boolean}            `true` if the browsers is displaying in full screen and `false` when it isn't
         */
        var isFullscreenActive = function() {
            var htmlEl = $('html')[0];
            if (htmlEl.requestFullscreen) {
                return document.fullScreenElement;
            } else if (htmlEl.mozRequestFullScreen) {
                return document.mozFullScreenElement;
            } else if (htmlEl.webkitRequestFullscreen) {
                return document.webkitFullScreenElement;
            } else {
                return false;
            }
        };

        /**
         * Display the document in full screen using the
         * HTML5 full screen API
         */
        var activateFullscreen = function() {
            var viewerEl = $('#documentpreview-container', $rootel)[0];
            if (viewerEl.requestFullscreen) {
                viewerEl.requestFullscreen();
            } else if (viewerEl.mozRequestFullScreen) {
                viewerEl.mozRequestFullScreen();
            } else if (viewerEl.webkitRequestFullscreen) {
                viewerEl.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            }

            // Re-center the pges in full screen
            positionAllPages();
        };

        /**
         * Return a full screen document to the regular screen
         */
        var deactivateFullscreen = function() {
            if (document.cancelFullScreen) {
                document.cancelFullScreen();
            } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if (document.webkitCancelFullScreen) {
                document.webkitCancelFullScreen();
            }
        };

        /**
         * Check whether or not the browser supports the HTML5
         * full screen API
         *
         * @return {Boolean}            `true` if the browsers support full screen and `false` when it doesn't
         * @see http://www.w3.org/TR/fullscreen/
         */
        var isFullscreenSupported = function() {
            var htmlEl = $('html')[0];
            return htmlEl.requestFullscreen || htmlEl.mozRequestFullScreen || htmlEl.webkitRequestFullscreen;
        };











        /////////////
        // Zooming //
        /////////////

        /**
         * Adjust display for a change in zoom level
         */
        var changeZoom = function() {
console.log('changeZoom');
            /**
             * We need to adjust the scroll position after rescaling
             * the pages. Remember where we are now.
             */
            var currentPage = pages[state.pageNumber-1];
            var currentTop = currentPage.$el.position().top;
            var currentZoom = $content.attr('data-zoom');

            // Scale all the pages
            $content.attr('data-zoom', state.zoomLevel);
            _.each(pages, zoomPage);

            // Restore the scroll position
            var newTop = (currentTop / currentZoom) * state.zoomLevel;
            $content.scrollTop($content.scrollTop() + currentPage.$el.position().top - newTop);
        };

        /**
         * Validate and accept an input page number
         */
        var pageInput = function() {
console.log('pageInput');
            /**
             * Convert input to a number. By prepending a `+`
             * we ensure that mixed letter/numbers are converted
             * to NaN (which is different from `parseInt()`.
             */
            var pageNumber = +$pageNumber.val();
            /**
             * If the number the user is entering isn't valid,
             * we ignore the changes.
             */
            if (!(_.isNaN(pageNumber)) &&
                 (pageNumber >= 1) &&
                 (pageNumber <= widgetData.previews.pageCount) &&
                 (pageNumber !== state.pageNumber)) {

                state.pageNumber = pageNumber;
                /**
                 * Before we load the requested page, we must make
                 * sure that all prior pages are in the DOM.
                 * Otherwise the scroll position of the page might
                 * change if those prior pages are later loaded.
                 */
                preloadPages(pageNumber, function() {
                    scrollToPage(pages[pageNumber-1]);
                });
            }
        };

        /**
         * TODO
         */
        var zoomIn = function() {
            var zoomIndex = _.indexOf(ZOOMLEVELS, state.zoomLevel);
            if (zoomIndex < (ZOOMLEVELS.length - 1)) {
                state.zoomLevel = ZOOMLEVELS[++zoomIndex];
                refreshToolbar();
                changeZoom();
            }
        };

        /**
         * TODO
         */
        var zoomOut = function() {
            var zoomIndex = _.indexOf(ZOOMLEVELS, state.zoomLevel);
            if (zoomIndex > 0) {
                state.zoomLevel = ZOOMLEVELS[--zoomIndex];
                refreshToolbar();
                changeZoom();
            }
        };

        /**
         * TODO
         */
        var prevPage = function() {
            if (state.pageNumber > 1) {
                state.pageNumber--;
                refreshToolbar();
            }
            /**
             * Always execute the scrollTo, even if user
             * is already on page 1, so that the user can
             * easily get to the top of the document.
             */
            scrollToPage(pages[state.pageNumber-1]);
        };

        /**
         * TODO
         */
        var nextPage = function() {
            if (state.pageNumber < widgetData.previews.pageCount) {
                state.pageNumber++;
                refreshToolbar();
                scrollToPage(pages[state.pageNumber-1]);
            }
        };

        /**
         * Wait for loading of all pages ahead of a given page, e.g.
         * to ensure that the scroll position of the given page can
         * be calculated accurately
         *
         * @param  {Number}  pageNumber  number of page to load up to
         */
        var preloadPages = function(pageNumber, callback) {
console.log('preloadPages');
            // If a wait is already in progress, cancel it
            // TODO
            if (isPreloading) {
                return;
            }
            isPreloading = true;
            $content.addClass('documentpreview-content-preloading');

            var preloadPage = function() {
                for (var i = 0; i < pageNumber; i++) {
                    var page = pages[i];
                    if (!page.loaded) {
                        return loadPage(page, preloadPage);
                    }
                }
                isPreloading = false;
                $content.removeClass('documentpreview-content-preloading');
                callback();
            }

            preloadPage();
        };

        /**
         * Scroll the content area to a specific page
         *
         * @param  {Object}  page  page to be shown
         */
        var scrollToPage = function(page) {
console.log('scrollToPage');
            // Make sure the page has (or is getting) content
            loadPage(page);

            // Scroll to the page's position (with a little cushion)
            $content.scrollTop($content.scrollTop() +
                               page.$el.position().top -
                               PAGEVIEWCUSION);

            // Prefetch if space is available
            prefetch();
        };

        /**
         * Zoom the page according to the document zoom level
         *
         * @param  {Object}  page  page to be scaled
         */
        var zoomPage = function(page) {
            page.$el.css({
                'height': page.height * state.zoomLevel + 'px',
                'transform': 'scale(' + state.zoomLevel + ')',
                'width': contentWidth / state.zoomLevel + 'px'
            });

            // Prefetch if the zooming opened up space
            prefetch();
        };

        /**
         * TODO
         */
        var positionAllPages = function() {
            contentWidth = $content.width();
            // TODO
            $('.documentpreview-content-page', $rootel).css('width', contentWidth / state.zoomLevel + 'px');
        };

        /**
         * See which pages are currently viewable in the container
         */
        var updatePagesInView = function() {
console.log('updatePagesInView');
            /*pagesInView = _.reduce(pages, function(inView, page) {
                if (page.$el) {
                    if ( ((page.$el.position().top + page.$el.height()) > PAGEVIEWCUSION) &&
                         (page.$el.position().top <= $content.height()) ) {
                        inView.push(page);
                    }
                }
                return inView;
            }, []);*/

        };

        /**
         * Ensure the container is full enough to scroll
         */
        var prefetch = function() {
console.log('prefetch');
            // If all pages already loading/loaded, we're done
            if (lastPageLoaded < widgetData.previews.pageCount) {

                // Make sure there's one container's worth of content
                // "below the fold"
                if (($content.prop('scrollHeight') -
                        $content.height() -
                        $content.scrollTop())  <  $content.height()) {
                    loadPage(pages[lastPageLoaded]);
                }
            }

        };

        /**
         * TODO
         */
        var scrollContent = function() {

            /**
             * See what page user is currently viewing so,
             * if necessary, we can update the toolbar
             */
            updatePagesInView();
            var pageNumber = pagesInView.length ? pagesInView[0].pageNumber : 1;
            if (pageNumber !== state.pageNumber) {
                state.pageNumber = pageNumber;
                refreshToolbar();
            }

            // Prefetch to make sure more content is available
            prefetch();

        };


        ////////////////////
        // Initialization //
        ////////////////////

        /**
         * Inject the stylesheets that have been generated by pdf2htmlEX for the
         * current document
         */
        var loadStyleSheets = function() {
            // TODO
            LazyLoad.css([constructDocumentPreviewURL('base.css'), constructDocumentPreviewURL('fancy.css'), constructDocumentPreviewURL('lines.css')], function() {
                scrollToPage(pages[state.pageNumber - 1]);
            });
        };

        /**
         * Add the different event bindings
         */
        var addBinding = function() {
            // Zooming
            $zoomIn.on('click', zoomIn);
            $zoomOut.on('click', zoomOut);

            // Full screen
            $fullScreen.on('click', toggleFullscreen);

            // Page navigation
            $prevPage.on('click', prevPage);
            $nextPage.on('click', nextPage);
            $pageNumber.on('change', pageInput);

            // Page infinite scrolling
            $content.on('scroll', _.throttle(scrollContent, 50));

            // Page positioning
            $(window).on('resize', _.debounce(positionAllPages, 50));
            //$(document).on('webkitfullscreenchange mozfullscreenchange fullscreenchange', alignAllPages);
        };

        /**
         * Set up the document preview widget by loading the document stylesheets
         * and preparing the toolbar
         */
        var setUpDocumentPreview = function() {
            // Create objects for each of the pages in the document, allowing for the
            // loading status and size of the page to be tracked
            for (var p = 0; p < widgetData.previews.pageCount; p++) {
                pages.push({
                    'pageNumber': p + 1,  // Document page numbers start at 1
                    'loaded': false
                });
            }

            // Add the document's page count to the toolbar
            $('.documentpreview-page-count', $rootel).text(widgetData.previews.pageCount);
            // Enable the full screen toggle button when the browser supports the
            // HTML5 full screen API
            if (isFullscreenSupported()) {
                $fullScreen.show();
            }
            refreshToolbar();

            // Load the document stylesheets
            loadStyleSheets();

            // Set up the content container
            //$content.attr('data-zoom', state.zoomLevel);
        };

        addBinding();
        setUpDocumentPreview();
        positionAllPages();

    };
});
