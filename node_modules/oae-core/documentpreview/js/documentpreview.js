/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 *
 * This module (along with its associated assets) implements a document
 * preview widget. The widget displays the content of an uploaded
 * document as individual pages within a section of the web page. It
 * provides controls to allow users to advance to specific document
 * pages and to zoom in or out to show detail. The widget also supports
 * a full-screen mode with browsers that provide the HTML5 full screen
 * API.
 */

define(['jquery', 'underscore', 'oae.core'], function($, _, oae) {

    return function(uid, showSettings, widgetData) {


        ///////////////
        // Constants //
        ///////////////

        // What zoom levels do we support, sorted in order of increasing zoom
        // levels.
        var ZOOMLEVELS = [50, 75, 90, 100, 110, 125, 150, 200];

        // How close (in pixels) to get to the bottom of a scrolling container
        // before loading more content.
        var LOADTHRESHOLD = 200;

        var DEFAULTSTATE = {
            zoomlevel: 100,
            pagenum: 1
        };
        
    
        ////////////////
        // Attributes //
        ////////////////

        // Variable that will be used to save the options associated
        // with the widget when it is created.
        var options = $.extend(true, {},
            {uid: uid},
            {showSettings: showSettings},
            {widgetData: widgetData}
        );
        
        // Until there's an API to get anything else, we'll use
        // the last revision ID as the one to display.
        options.revisionId = options.widgetData.latestRevisionId;
        
        // Variable that will keep track of the current interaction
        // state of the widget.
        var state = $.extend(true, {}, DEFAULTSTATE);

        // Variable to store the array of pages in the document
        var pages = [];


        ///////////////////////////////
        // Cached Element References //
        ///////////////////////////////

        var $rootel = $('#' + uid);
        var $container = $rootel.find('#documentpreview-container');
        var $content = $container.find('.documentpreview-content');
        var $zoomIn = $container.find('.documentpreview-zoom-in');
        var $zoomOut = $container.find('.documentpreview-zoom-out');
        var $fullScreen = $container.find('.documentpreview-full-screen');
        var $prevPage = $container.find('.documentpreview-page-prev');
        var $pageNumber = $container.find('.documentpreview-page-num');
        var $totalPages = $container.find('.documentpreview-page-count');
        var $nextPage = $container.find('.documentpreview-page-next');


        ///////////////////////////
        // Convenience Functions //
        ///////////////////////////

        /**
         * Does the browser support HTML5 full screen API?
         * @returns {boolean} true if full screen is available
         */
        var hasFullscreen = function() {
            var el = $('html')[0];
            return el.requestFullscreen ||
                   el.mozRequestFullScreen ||
                   el.webkitRequestFullscreen;
        };
    
        /**
         * Display an element in full screen mode
         * @param {object} DOM element to render in full screen
         */
        var activateFullscreen = function(el) {
            if (el.requestFullscreen) {
              el.requestFullscreen();
            } else if (el.mozRequestFullScreen) {
              el.mozRequestFullScreen();
            } else if (el.webkitRequestFullscreen) {
              el.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            }
        };

        /**
         * Create a full URL for a document preview component
         * @param {string} base URL for the component (e.g. "styles.css")
         * @returns {string} complate path to component
         */
        var makeUrl = function(baseUrl) {
            return '/api/content/' + options.widgetData.id +
                   '/revisions/' + options.revisionId +
                   '/previews/' + baseUrl +
                   '?signature=' + options.widgetData.signature.signature +
                   '&expires=' + options.widgetData.signature.expires +
                   '&lastmodified=' + options.widgetData.signature.lastModified;
        };


        /////////////
        // Toolbar //
        /////////////
        
        /**
         * Refresh the Toolbar view
         */
        var refreshToolbar = function() {
            var zoomidx = _(ZOOMLEVELS).indexOf(state.zoomlevel);
            var pagenum = state.pagenum;
            var pagecnt = options.widgetData.previews.pageCount;
        
            // Enable/disable controls as appropriate
            $zoomOut.prop('disabled', (zoomidx <= 0));
            $zoomIn.prop('disabled', (zoomidx >= (ZOOMLEVELS.length - 1)));
            $nextPage.prop('disabled', (pagenum >= pagecnt));
            
            // Indicate the page that is currently shwoing
            $pageNumber.val(pagenum);
        };
        
        /**
         * Adjust display for a change in zoom level
         */
        var changeZoom = function() {
            _(pages).each(function(page) {
                zoomPage(page);
            });
        }

        /**
         * Toolbar event handlers
         */
        $zoomIn.on('click', function() {
            var zoomidx = _(ZOOMLEVELS).indexOf(state.zoomlevel);
            if (zoomidx < (ZOOMLEVELS.length - 1)) {
                state.zoomlevel = ZOOMLEVELS[++zoomidx];
                refreshToolbar();
                changeZoom();
            }
        });

        $zoomOut.on('click', function() {
            var zoomidx = _(ZOOMLEVELS).indexOf(state.zoomlevel);
            if (zoomidx > 0) {
                state.zoomlevel = ZOOMLEVELS[--zoomidx];
                refreshToolbar();
                changeZoom();
            }
        });

        $fullScreen.on('click', function() {
            activateFullscreen($content[0]);
        });

        $prevPage.on('click', function() {
            if (state.pagenum > 1) {
                state.pagenum--;
                refreshToolbar();
            }
            scrollToPage(state.pagenum);
        });

        $nextPage.on('click', function() {
            if (state.pagenum < options.widgetData.previews.pageCount) {
                state.pagenum++;
                refreshToolbar();
                scrollToPage(state.pagenum);
            }
        });

        $pageNumber.on('input', _(function() {
            /**
             * Note that we don't need to refresh the toolbar for
             * this event since the user is doing that for us.
             * We do limit the actual page number (though not
             * the one displayed) to the maximum that's actually
             * in the document.
             */
            pagenum = parseInt($pageNumber.val(), 10) || 1;
            pagenum = Math.min(pagenum, options.widgetData.previews.pageCount);
            pagenum = Math.max(pagenum, 1);
            if (pagenum !== state.pagenum) {
                state.pagenum = pagenum;
                scrollToPage(state.pagenum);
            }
        }).debounce(500));

        $pageNumber.on('blur', function() {
            /**
             * We need to refresh the toolbar in case the user
             * entered a value that exceeds the document page
             * count. We don't have to worry about the actual
             * state, though, since the pageChanged() handler
             * keeps that up-to-date and valid.
             */
            refreshToolbar();
        });

        //////////////////////
        // Document Content //
        //////////////////////

        /**
         * Start the process of loading a document page
         * @param {integer} page number (starting at 1)
         */
        var loadPage = function(num) {
            var page = _(pages).find(function(pg) {
                return pg.num === num;
            });
            /**
             * Make sure we have an element in which to place the
             * page content and that there isn't already a request
             * in progress.
             */
            if (page && page.$el && !page.deferred) {
                /**
                 * Ensure that the loading element is at least as
                 * high as the content container. Otherwise, if we
                 * try to scroll to the page before the content is
                 * loaded, then the browser will calculate the
                 * wrong scroll position.
                 */
                var $loadingContainer = $('<div />')
                    .addClass('text-center')
                    .css({
                        'clear': 'both',
                        'min-height': $content.height()
                    }
                );
                var $loader = $('<i />').addClass('icon-spinner icon-spin');
                // Create a text element that will be used for accessibility purposes
                var $a11yHelper = $('<span />').text('__MSG__LOADING__').addClass('oae-aural-text');
//                var $a11yHelper = $('<span />').text(oaeI18n.translate('__MSG__LOADING__')).addClass('oae-aural-text');
                // Add the accessibility helper to the loading animation and add the loading
                // animation to the loader container
                $loader.append($a11yHelper);
                $loadingContainer.append($loader);
                page.$el.append($loadingContainer);

                // Request the page
                page.deferred = $.ajax({
                    url: makeUrl('page.' + num + '.html'),
                    dataType: 'text'
                })
                .done(function(response) {
                    $loadingContainer.remove();
                    page.$child = $('<div />').html(response);
                    page.$el.append(page.$child);
                    page.naturalHeight = page.$child.height();
                    page.naturalWidth = page.$child.width();
                    page.contentWidth = page.$child.find('>*').width();
                    zoomPage(page);
                })
            }
        };

        /**
         * Zoom the page according to the document zoom level
         * @param {integer} page number (starting at 1)
         */
        var zoomPage = function(page) {
            if (page.$child && page.naturalHeight && page.naturalWidth && page.contentWidth) {
                var scale = state.zoomlevel / 100;
                var shiftX = (page.contentWidth / 2) * ((state.zoomlevel - 100)/100);
                var shiftY = (page.naturalHeight / 2) * ((state.zoomlevel - 100)/100);
                page.$el.css({
                    height: (page.naturalHeight * scale) + 'px',
                    width: ((page.naturalWidth - page.contentWidth) / scale + page.contentWidth * scale) + 'px'
                });
                // page.$child.css({
                // });
                page.$child
                    .css('-webkit-transform', 'scale(' + scale + ')')
                    .css('-moz-transform', 'scale(' + scale + ')')
                    .css('-ms-transform', 'scale(' + scale + ')')
                    .css('transform', 'scale(' + scale + ')');
                page.$el
                    .css('-webkit-transform', 'translate(' + shiftX + 'px,' + shiftY + 'px)')
                    .css('-moz-transform', 'translate(' + shiftX + 'px,' + shiftY + 'px)')
                    .css('-ms-transform', 'translate(' + shiftX + 'px,' + shiftY + 'px)')
                    .css('transform', 'translate(' + shiftX + 'px,' + shiftY + 'px)');
            }
        }

        /**
         * Scroll the content area to a specific page
         * @param {integer} page number (starting at 1)
         */
        var scrollToPage = function(num) {
            // Make sure the page has (or is getting) content
            loadPage(num);
            // Scroll to the page's position
            var page = _(pages).find(function(pg) {
                return pg.num === num;
            });
            if (page) {
                $content.scrollTop($content.scrollTop() + page.$el.position().top);
            }
        };
        
        /**
         * Content area event handlers
         */
        $content.on('scroll', function() {
            var viewingPage = _.chain(pages).filter(function(pg) {
                return pg.$el.position().top <= 0;
            }).last().value();
            var pagenum = viewingPage ? viewingPage.num : 1;
            if (pagenum !== state.pagenum) {
                state.pagenum = pagenum;
                refreshToolbar();
            }
            // Check to see if we need to load more content
            var pixelsRemaing = $content.prop('scrollHeight') - $content.height() - $content.scrollTop();
            if (pixelsRemaing < LOADTHRESHOLD) {
                loadPage(pagenum+1);
            }
        });


        ////////////////////
        // Initialization //
        ////////////////////

        // Inject the document-specific style sheets
        _(['base.css','fancy.css','lines.css']).each(function(file) {
            $('head').append('<link rel="stylesheet" href="' + makeUrl(file) + '"/>');
        })
        
        // Create the objects and containers for all document pages
        _.chain(options.widgetData.previews.pageCount).range().each(function(idx) {
            var num = idx + 1; // Document page numbers start at 1
            var $el = $('<div />')
                .addClass('documentpreview-content-page')
                .attr('data-pagenum', num);
            $content.append($el);
            pages.push({
                num: num,
                $el: $el
            });
        });
        
        // Update the toolbar etc. to reflect current state
        $totalPages.text(options.widgetData.previews.pageCount);
        if (hasFullscreen()) {
            $fullScreen.show();
        }
        refreshToolbar();
        
        // Scroll to the page to view
        scrollToPage(state.pagenum);

    };
});
