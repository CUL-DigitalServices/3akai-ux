/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

// This module (along with its associated assets) implements a document
// preview widget. The widget displays the content of an uploaded
// document as individual pages within a section of the web page. It
// provides controls to allow users to advance to specific document
// pages and to zoom in or out to show detail. The widget also supports
// a full-screen mode with browsers that provide the HTML5 full screen
// API.
//
// ## Creating a Module
//
// The module's creation function accepts three parameters
//
// * `uid`: A unique identifier for this particular object. (In general,
//   a web page may include multiple instances of any particular
//   widget, thought this may be less likely for the document
//   preview widget. The `uid` parameter is passed to all widgets,
//   however, to provide a unique ID.)
// * `showSettings`: Not currently used by this widget.
// * `widgetData`: Information about the document to preview. The widget
//   uses several properties of this object:
//   * `id`: Unique identifier for the document to preview.
//   * `latestRevisionId`: Unique identifier for the latest revision of
//     the document. For now, that's the one we're previewing.
//   * `previews.pageCount`: Total number of pages in the document.
//   * `signature.signature`: Digital signature that grants access to the
//     document.
//   * `signature.expires`: Time at which signature (granting access) expires.
//   * `signature.lastModified`: Last modification time of signature that
//     grants access to document.
//
// ## Removing a Module
//
// Although the standard OAE widget doesn't normally include a `delete`
// method, we want to be good citizens and at least provide the option
// to clean up after ourselves. If the `uid` parameter is undefined,
// then we'll take that as a request to delete the widget. The actual
// deletion would be handled by the widget loader, but we do need to
// clean up some stuff that the loader won't know about.
//
// ## API Dependencies
//
// The module relies on the OAE core API to deliver the actual document
// preview content. That content includes several CSS style sheets to
// inject into the web page, as well as HTML for the document pages. All
// API requests include signature parameters added as a query string,
// e.g.,
//
//     ?signature={sig}&expires={exp}&lastmodified={mod}
//
// where
//
// * `{sig}` is the `signature.signature` property of the `widgetData`.
// * `{exp}` is the `signature.expires` property of the `widgetData`.
// * `{mod}` is the `signature.lastModified` property of the `widgetData`.
//
// The extra CSS style sheets are
//
// * `/api/content/{docId}/revisions/{revId}/previews/base.css`
// * `/api/content/{docId}/revisions/{revId}/previews/fancy.css`
// * `/api/content/{docId}/revisions/{revId}/previews/lines.css`
//
// where
//
// * `{docId}` is the unique identifier for the document (the `id`
//   property of `widgetData`.
// * `{revId}` is the identifier for the latest revision (the
//   `lastRevisionId` property of `widgetData`.
//
// The document's pages are themselves accessed via the API as
//
// * `/api/content/{docId}/revisions/{revId}/previews/page.{pageNum}.html`
//
// where `{pageNum]` is the specific document page required.
//
// ## Document Format
//
// TDB

define(['jquery', 'underscore', 'oae.core'], function($, _, oae) {

    // ## Constants

    // We define sensible (well, as sensible as possible) defaults
    // for all the parameters and options that the widget requires.
    // If/when there's a more robust error handling framework in
    // place, we should probably re-visit this approach and throw
    // an error when a required property isn't present. For now,
    // though, throwing an error wouldn't accomplish anything
    // useful so we'll muddle along.
    var DEFAULTOPTIONS = {
        showSettings: {},
        widgetData:   {
            id: 0,
            latestRevisionId: 0,
            previews: {
                pageCount: 0
            },
            signature: {
                signature: '',
                expires:   '',
                lastModified: ''
            }
        }
    };
    var DEFAULTSTATE = {
        zoomlevel: 100,
        pagenum: 1
    }
    
    // What zoom levels do we support, sorted in order of increasing zoom levels.
    var ZOOMLEVELS = [50, 75, 90, 100, 110, 125, 150, 200];

    // ## Private Attributes

    // More information on individual attributes when they're
    // initialized in the `init()` function.
    var options,
        state,
        $content,
        toolbar = {},
        styleSheets = [];


    // ## Private Member Functions

    // `saveState()` preserves a copy of the current state for this
    // document so it can be restored if the user returns to the
    // same document later.
    var saveState = function() {
        // For now, we're only using HTML5 local storage. If we need
        // to support legacy browsers and this feature is essential,
        // we could fall back to cookies.
        if (localStorage) {
            localStorage.setItem(
                'documentpreview-' + options.widgetData.id,
                JSON.stringify(state)
            );
        }
    };

    // `getSavedState()` retrieves the saved state if one is available;
    // otherwise it returns an empty object.
    var getSavedState = function() {
        var savedState = null;
        // As above, we're only using HTML5 local storage for now.
        if (localStorage) {
            savedState = localStorage.getItem(
                'documentpreview-' + options.widgetData.id
            );
        }
        return _.isNull(savedState) ? {} : JSON.parse(savedState);
    };

    // `getZoomIndex()` finds the index within the ZOOMLEVELS array
    // of a given value. If there is no exact value, it finds the
    // closest one. We need to account for the case of no exact
    // match because we're saving zoom levels in, e.g. HTML5
    // local storage. If the widget is updated with a new set
    // of zoom levels, a user may still have a value from the
    // older version. Since we can't do an exact match, we'll
    // do the best we can.
    var getZoomIndex = function(zoom) {
        var closest = _(ZOOMLEVELS).min(function(level) {
            return Math.abs(level - zoom);
        })
        return _(ZOOMLEVELS).indexOf(closest);
    }

    // `updateZoom()` updates the document to the user-specified
    // zoom level.
    var updateZoom = function() {
        $content.attr("data-zoom", state.zoomlevel)
    }

    // `ensureZoom()` ensures that the zoom level is valid. This
    // functionality may be needed if the user is returning to a
    // page using a newer version of the widget with updated zoom
    // levels.
    var ensureZoomLevel = function() {
        state.zoomlevel = ZOOMLEVELS[getZoomIndex(state.zoomlevel)];
    }
    // `ensurePageNum()` ensures that the current page number is valid.
    // This functionality may be needed if the user is returning to a
    // newer revision of the document that has fewer pages than the
    // prior revision.
    var ensurePageNumn = function() {
        if (state.pagenum > options.widgetData.previews.pageCount) {
            state.pagenum = options.widgetData.previews.pageCount;
        }
    }

    // `updateToolbar()` updates the toolbar controls to reflect
    // the current widget state.
    var updateToolbar = function() {
        var zoomidx,
            pagenum,
            pagecnt;

        // Make sure the zoom level and page number is valid.
        ensureZoomLevel();
        ensurePageNumn();

        zoomidx = getZoomIndex(state.zoomlevel);
        pagenum = state.pagenum;
        pagecnt = options.widgetData.previews.pageCount;

        // Enable/disable zoom buttons as appropriate
        if (zoomidx === 0) {
            toolbar.$zoomOut.addClass('disabled');
        } else {
            toolbar.$zoomOut.removeClass('disabled');
        }
        if (zoomidx === (ZOOMLEVELS.length - 1)) {
            toolbar.$zoomIn.addClass('disabled');
        } else {
            toolbar.$zoomIn.removeClass('disabled');
        }

        // Enable/disable previous/next buttons as appropriate
        if (pagenum > 1) {
            toolbar.$prevPage.removeClass('disabled');
        } else {
            toolbar.$prevPage.addClass('disabled');
        }
        if (pagenum < pagecnt) {
            toolbar.$nextPage.removeClass('disabled');
        } else {
            toolbar.$nextPage.addClass('disabled');
        }

        // What page are we currently viewing?
        toolbar.$pageNumber.val(pagenum);

        // Set the total page count in the toolbar. In theory this
        // should only be needed once, but just in case we ever
        // support dynamic documents (e.g. live edits or annotations)
        // go ahead and update it as well.
        toolbar.$totalPages.text(pagecnt);
        
        // Finally, make sure the document preview matches
        // the desired zoom level.
        updateZoom();
    };

    // `zoomIn()` handles clicks on the zoom in button.
    var zoomIn = function(evt) {
        evt.preventDefault();
        var zoomidx = getZoomIndex(state.zoomlevel);
        if (zoomidx < (ZOOMLEVELS.length - 1)) {
            state.zoomlevel = ZOOMLEVELS[++zoomidx];
            saveState();
        }
        updateToolbar();
    }

    // `zoomOut()` handles clicks on the zoom out button.
    var zoomOut = function(evt) {
        evt.preventDefault();
        var zoomidx = getZoomIndex(state.zoomlevel);
        if (zoomidx > 0) {
            state.zoomlevel = ZOOMLEVELS[--zoomidx];
            saveState();
        }
        updateToolbar();
    }

    // `fullScreen()` handles clicks on the full screen button.
    var fullScreen = function(evt) {
        evt.preventDefault();
        updateToolbar();
    }

    // `prevPage()` handles clicks on the previous page button.
    var prevPage = function(evt) {
        evt.preventDefault();
        if (state.pagenum > 0) {
            state.pagenum--;
            saveState();
        }
        updateToolbar();
    }

    // `nextPage()` handles clicks on the next page button.
    var nextPage = function(evt) {
        evt.preventDefault();
        if (state.pagenum < options.widgetData.previews.pageCount) {
            state.pagenum++;
            saveState();
        }
        updateToolbar();
    }

    // `newPage()` handles changes on the page number input.
    var newPage = function(evt) {
        evt.preventDefault();
        // Note that we don't need to update the toolbar for
        // this event since the user is doing that for us.
    }

    // `signUrl()` adds the signature parameters to a URL.
    // Its input is the base URL, and it returns the augmented URL.
    // Note that we're blithely assuming the appropriate properties
    // exist in the `options` object. (We defined defaults, so they
    // should be present, even if they're not exactly functional.)

    var signUrl = function(baseUrl) {
        return baseUrl
            + '?signature=' + options.widgetData.signature.signature
            + '&expires=' + options.widgetData.signature.expires
            + '&lastmodified=' + options.widgetData.signature.lastModified;
    };

    // ### addStyles
    //
    // `addStyles()` adds the contents of a style sheet to the
    // document. It returns a reference to the newly added node
    // (which can be used to delete the added styles).

    var addStyles = function(styles) {

        // Direct DOM manipulation is fastest and most widely
        // supported, so we'll use it to create a style node.
        var cssNode = document.createElement('style');
        cssNode.type = 'text/css';

        // To add the actual styles, we handle IE first (of course)
        // since it's unique.
        if (cssNode.styleSheet) {
            cssNode.styleSheet.cssText = styles;
        } else {
            // Everyone else lets us just append the styles to the
            // node. Note that (all/some?) versions of Chrome don't
            // support innerHTML like everyone else so we'll go with
            // a plain old text node.
            cssNode.appendChild(document.createTextNode(styles));
        }

        // Styles are added to the head of the document. All
        // modern browsers support `document.head` but we'll
        // be nice and handle older browsers as well.
        var head = document.head || document.getElementsByTagName('head')[0];
        head.appendChild(cssNode);

        // Return the newly added style sheet node so it can
        // be easily removed.
        return cssNode;
    };

    // ### removeStyles
    //
    // `removeStyles()` removes a previously added style sheet
    // node from the DOM.

    var removeStyles = function(cssNode) {
        cssNode.parentNode.removeChild(cssNode);
    };

    // ### addStyleSheet
    //
    // `addStyleSheet()` adds an external CSS style sheet to the
    // page. Its parameter is an object that includes a `url`
    // property. When the style sheet is loaded, the `cssNode`
    // property of this object is set to the node that is
    // added to the DOM.

    var addStyleSheet = function(styleSheetObj) {
        
        // Note that we're grabbing the stylesheet directly
        // using a `$.ajax()` call rather than simply inserting
        // an external link into the DOM, e.g.
        //
        //     $('<link>')
        //         .attr({
        //             rel:  'stylesheet',
        //             type: 'text/css',
        //             href: styleSheetObj.url
        //         })
        //         .appendTo('head');
        //
        // The benefits of the `$.ajax()` approach include:
        //
        // 1. We'll know if there's an error in retrieving the
        //    the stylesheet so we can take corrective action
        //    if possible.
        // 2. We'll have easy access to the style rules from
        //    JavaScript so we can do fancy stuff like adjust
        //    the scrolling threshold based on page size(s)
        //    defined in the CSS.
        // 3. We can easily mock out the stylesheets for unit
        //    testing.

        $.ajax({
                url: styleSheetObj.url,
                dataType: 'text'
            })
            .done(function (response) {
                styleSheetObj.styles = response;
                styleSheetObj.cssNode = addStyles(response);
            })
            .fail(function() {
                // Here is where we could take corrective
                // action or indicate the error, if appropriate.
                // For now, we'll simply go with unstyled
                // content.
                styleSheetObj.styles = '';
                styleSheetObj.cssNode = null;
            })
    };

    // ### removeStyleSheet
    //
    // `removeStyleSheet()` removes an external CSS style sheet
    // from the page. Its parameter is an object that includes
    // a `cssNode` property that references the added node.

    var removeStyleSheet = function(styleSheetObj) {
        if (styleSheetObj.cssNode) {
            removeStyles(styleSheetObj.cssNode);
        }
        styleSheetObj.cssNode = null;
        styleSheetObj.styles = '';
   };

    // ### createStyleSheetUrl
    //
    // `createStyleSheetUrl()` constructs a full URL to access
    // a widget style sheet given the filename.

    var createStyleSheetUrl = function(filename) {
        return signUrl(
            '/api/content/' + options.widgetData.id +
            '/revisions/' + options.revisionId +
            '/previews/' + filename
        );
    };

    // ### init
    //
    // `init()` initializes the widget object. Its parameters
    // are the unique widget identifer and the widgetData object
    // passed on object creation

    var init = function(uid, showSettings, widgetData) {

        // Save local copies of the input parameters
        options = $.extend(true, {},
            DEFAULTOPTIONS,
            {uid: uid},
            {showSettings: showSettings},
            {widgetData: widgetData}
        );

        // Until there's an API to get anything else, we'll use
        // the last revision ID as the one to display.
        options.revisionId = options.widgetData.latestRevisionId;

        // Cache the element that's acting as the root
        // for the widget. This is where the unique identifier
        // comes into play. The widget will be installed inside
        // of an HTML element with the unique ID as an `id`
        // attribute.
        var $rootel = $('#' + uid);

        // The widget itself should be created within this uniquely
        // identified root element. Note that we use a class name
        // for the container to allow for the possibility of multiple
        // document preview widgets on the page.
        var $container = $rootel.find('.documentpreview-container');

        // Cache other elements on the page that we'll need to access
        // frequently.
        toolbar.$zoomIn     = $container.find('.dp-zoom-in');
        toolbar.$zoomOut    = $container.find('.dp-zoom-out');
        toolbar.$fullScreen = $container.find('.dp-full-screen');
        toolbar.$prevPage   = $container.find('.dp-page-prev');
        toolbar.$pageNumber = $container.find('.dp-page-num');
        toolbar.$totalPages = $container.find('.dp-page-count');
        toolbar.$nextPage   = $container.find('.dp-page-next');
        $content = $container.find('.dp-content');

        // Initialize the variables that track toolbar options, and
        // then update the toolbar and zoom levels.
        state = $.extend(true, {}, DEFAULTSTATE, getSavedState());
        updateToolbar();

        // Rendering the preview correctly relies on several
        // additional CSS style sheets. We can keep track of them
        // here in case there's ever a need to remove them (e.g.
        // if the widget is removed from the page without a page
        // refresh).
        styleSheets.push({url: createStyleSheetUrl('base.css')});
        styleSheets.push({url: createStyleSheetUrl('fancy.css')});
        styleSheets.push({url: createStyleSheetUrl('lines.css')});

        // Now we can go ahead and start adding the style sheets
        // to the page.
        _(styleSheets).each(function(styleSheetObj) {
            addStyleSheet(styleSheetObj);
        })

        // Next up is setting up event handlers for the toolbar.
        toolbar.$zoomIn.on('click', zoomIn);
        toolbar.$zoomOut.on('click', zoomOut);
        toolbar.$fullScreen.on('click', fullScreen);
        toolbar.$prevPage.on('click', prevPage);
        toolbar.$nextPage.on('click', nextPage);
        toolbar.$pageNumber.on('input', _(newPage).debounce(500));

    };

    // ### remove
    //
    // `remove()` prepares the widget for removal from the page.

    var remove = function() {
        // Remove the CSS style sheets we added to the page.
        _(styleSheets).each(function(styleSheetObj) {
            removeStyleSheet(styleSheetObj);
        });
        // Remove event handlers (important for garbage collection).
        toolbar.$zoomIn.off();
        toolbar.$zoomOut.off();
        toolbar.$fullScreen.off();
        toolbar.$prevPage.off();
        toolbar.$nextPage.off();
        toolbar.$pageNumber.off();
    };

    // ## Returned Object
    //
    // Return the object that controls the document preview.

    return function(uid, showSettings, widgetData) {

        if (_(uid).isUndefined()) {
            remove();
        } else {
            // We've got a `uid` defined, so go ahead and
            // initialize the widget.
            init(uid, showSettings, widgetData);
        }
        return {
            delete: remove
        }
    };
});
