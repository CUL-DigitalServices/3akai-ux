/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

// This module (along with its associated assets) implements a document
// preview widget. The widget displays the content of an uploaded
// document as individual pages within a section of the web page. It
// provides controls to allow users to advance to specific document
// pages and to zoom in or out to show detail. The widget also supports
// a full-screen mode with browsers that provide the HTML5 full screen
// API.
//
// ## Creating a Module
//
// The module's creation function accepts three parameters
//
// * `uid`: A unique identifier for this particular object. (In general,
//   a web page may include multiple instances of any particular
//   widget, thought this may be less likely for the document
//   preview widget. The `uid` parameter is passed to all widgets,
//   however, to provide a unique ID.)
// * `showSettings`: Not currently used by this widget.
// * `widgetData`: Information about the document to preview. The widget
//   uses several properties of this object:
//   * `id`: Unique identifier for the document to preview.
//   * `latestRevisionId`: Unique identifier for the latest revision of
//     the document. For now, that's the one we're previewing.
//   * `previews.pageCount`: Total number of pages in the document.
//   * `signature.signature`: Digital signature that grants access to the
//     document.
//   * `signature.expires`: Time at which signature (granting access) expires.
//   * `signature.lastModified`: Last modification time of signature that
//     grants access to document.
//
// ## Removing a Module
//
// Although the standard OAE widget doesn't normally include a `delete`
// method, we want to be good citizens and at least provide the option
// to clean up after ourselves. If the `uid` parameter is undefined,
// then we'll take that as a request to delete the widget. The actual
// deletion would be handled by the widget loader, but we do need to
// clean up some stuff that the loader won't know about.
//
// ## API Dependencies
//
// The module relies on the OAE core API to deliver the actual document
// preview content. That content includes several CSS style sheets to
// inject into the web page, as well as HTML for the document pages. All
// API requests include signature parameters added as a query string,
// e.g.,
//
//     ?signature={sig}&expires={exp}&lastmodified={mod}
//
// where
//
// * `{sig}` is the `signature.signature` property of the `widgetData`.
// * `{exp}` is the `signature.expires` property of the `widgetData`.
// * `{mod}` is the `signature.lastModified` property of the `widgetData`.
//
// The extra CSS style sheets are
//
// * `/api/content/{docId}/revisions/{revID}/previews/base.css`
// * `/api/content/{docId}/revisions/{revID}/previews/fancy.css`
// * `/api/content/{docId}/revisions/{revID}/previews/lines.css`
//
// where
//
// * `{docId}` is the unique identifier for the document (the `id`
//   property of `widgetData`.
// * `{revId}` is the identifier for the latest revision (the
//   `lastRevisionId` property of `widgetData`.
//
// The document's pages are themselves accessed via the API as
//
// * `/api/content/{docId}/revisions/{revId}/previews/page.{pageNum}.html`
//
// where `{pageNum]` is the specific document page required.
//
// ## Document Format
//
// TDB

define(['jquery', 'underscore', 'oae.core'], function($, _, oae) {

    // ## Constants

    var WIDGETCLASS = 'documentpreview-container';

    // ## Private Attributes

    // More information on individual attributes when they're
    // initialized in the `init()` function.
    var rootel,
        container,
        options,
        styleSheets = [];


    // ## Private Member Functions

    // `signUrl()` adds the signature parameters to a URL.
    // Its input is the base URL, and it returns the augmented URL.

    var signUrl = function(baseUrl) {
        return baseUrl + '?signature=' + options.signature.signature +
                         '&expires=' + options.signature.expires +
                         '&lastmodified=' + options.signature.lastModified;
    };

    // ### addStyles
    //
    // `addStyles()` adds the contents of a style sheet to the
    // document. It returns a reference to the newly added node
    // (which can be used to delete the added styles).

    var addStyles = function(styles) {

        // Direct DOM manipulation is fastest and most widely
        // supported, so we'll use it to create a style node.
        var cssNode = document.createElement('style');
        cssNode.type = 'text/css';

        // To add the actual styles, we handle IE first (of course)
        // since it's unique.
        if (cssNode.styleSheet) {
            cssNode.styleSheet.cssText = styles;
        } else {
            // Everyone else lets us just append the styles to the
            // node. Note that (all/some?) versions of Chrome don't
            // support innerHTML like everyone else so we'll go with
            // a plain old text node.
            cssNode.appendChild(document.createTextNode(styles));
        }

        // Styles are added to the head of the document. All
        // modern browsers support `document.head` but we'll
        // be nice and handle older browsers as well.
        var head = document.head || document.getElementsByTagName('head')[0];
        head.appendChild(cssNode);

        // Return the newly added style sheet node so it can
        // be easily removed.
        return cssNode;
    };

    // ### removeStyles
    //
    // `removeStyles()` removes a previously added style sheet
    // node from the DOM.

    var removeStyles = function(cssNode) {
        cssNode.parentNode.removeChild(cssNode);
    };

    // ### addStyleSheet
    //
    // `addStyleSheet()` adds an external CSS style sheet to the
    // page. Its parameter is an object that includes a `url`
    // property. When the style sheet is loaded, the `cssNode`
    // property of this object is set to the node that is
    // added to the DOM.

    var addStyleSheet = function(styleSheetObj) {
        $.ajax({
                url: styleSheetObj.url,
                dataType: 'text'
            })
            .done(function (response) {
                styleSheetObj.cssNode = addStyles(response);
            })
            .fail(function() {
                styleSheetObj.cssNode = null;
            })
    };

    // ### removeStyleSheet
    //
    // `removeStyleSheet()` removes an external CSS style sheet
    // from the page. Its parameter is an object that includes
    // a `cssNode` property that references the added node.

    var removeStyleSheet = function(styleSheetObj) {
        if (styleSheetObj.cssNode) {
            removeStyles(styleSheetObj.cssNode);
        }
    };

    // ### createStyleSheetUrl
    //
    // `createStyleSheetUrl()` constructs a full URL to access
    // a widget style sheet given the filename.

    var createStyleSheetUrl = function(filename) {
        return signUrl(
            '/api/content/' + options.id +
            '/revisions/' + options.latestRevisionId +
            '/previews/' + filename
        );
    };

    // ### init
    //
    // `init()` initializes the widget object. Its parameters
    // are the unique widget identifer and the widgetData object
    // passed on object creation

    var init = function(uid, widgetData) {

        // Save local copies of the inpur parameters
        options = _({}).extend({uid: uid}, widgetData);

        // Cache the element that's acting as the root
        // for the widget. This is where the unique identifier
        // comes into play. The widget will be installed inside
        // of an HTML element with the unique ID as an `id`
        // attribute.
        rootel = document.getElementById(uid);

        // The widget itself should be created within this uniquely
        // identified root element. Note that we use a class name
        // for the container to allow for the possibility of multiple
        // document preview widgets on the page.
        container = rootel.getElementsByClassName(WIDGETCLASS);
        
        // Rendering the preview correctly relies on several
        // additional CSS style sheets. We can keep track of them
        // here in case there's ever a need to remove them (e.g.
        // if the widget is removed from the page without a page
        // refresh).
        styleSheets.push({url: createStyleSheetUrl('base.css')});
        styleSheets.push({url: createStyleSheetUrl('fancy.css')});
        styleSheets.push({url: createStyleSheetUrl('lines.css')});

        // Now we can go ahead and start adding the style sheets
        // to the page.
        _(styleSheets).each(function(styleSheetObj) {
            addStyleSheet(styleSheetObj);
        })
        
    };

    // ### remove
    //
    // `remove()` prepares the widget for removal from the page.

    var remove = function() {
        // Remove the CSS style sheets we added to the page.
        _(styleSheets).each(function(styleSheetObj) {
            removeStyleSheet(styleSheetObj);
        });
    };

    // ## Returned Object
    //
    // Return the object that controls the document preview.

    return function(uid, showSettings, widgetData) {

        if (_(uid).isUndefined()) {
            remove();
        } else {
            // We've got a `uid` defined, so go ahead and
            // initialize the widget.
            init(uid, widgetData);
        }
        return {
            delete: remove
        }
    };
});
