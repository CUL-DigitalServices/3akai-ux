define(function(require) {

  var docpreview = require('widget!documentpreview');
  var cssformat = require('cssformat');
  var jsformat = require('jsformat');

window.dp = docpreview;

  describe('Document Preview Widget', function(){

    describe('Manifest', function(){
      it('should exist', function(){
        docpreview.manifest.should.be.ok;
      })
      it('should not be empty', function(){
        docpreview.manifest.should.not.be.empty;
      })
      it('should include a URL for the HTML template', function(){
        docpreview.manifest.src.should.be.ok;
      })
    })
    
    describe('HTML Template', function(){
      it('should exist', function(){
        docpreview.html.should.be.ok;
      })
      it('should not be empty', function(){
        docpreview.html.should.not.be.empty;
      })
      it('should include exactly one CSS style sheet', function(){
        docpreview.cssStyleSheets.should.have.length.of(1);
      })
      it('should include exactly one external JavaScript file', function(){
        docpreview.jsScripts.should.have.length.of(1);
      })
    })

    describe('CSS Style Sheet', function(){
      it('should not be empty', function(){
        docpreview.cssStyleSheets[0].content.should.not.be.empty;
      })
      describe('Formatting', function(){
        cssformat(docpreview.cssStyleSheets[0].content);
      })
    })

    describe('JavaScript Module', function(){
      it('should not be empty', function(){
        docpreview.jsScripts[0].content.should.not.be.empty;
      })
      it('should return a function', function() {
        docpreview.jsScripts[0].content.should.be.a('function');
      })
      describe('Formatting', function(){
        jsformat(docpreview.jsFiles[0].content);
      })
    })

    describe('Static Rendering', function() {
      var widgetData = {
        id: 2,
        latestRevisionId: 3,
        previews: {pageCount: 4},
        signature: {signature: 5, expires: 6, lastModified: 7}
      };
      before(function() {
        docpreview.load('widget-container', {}, widgetData);
      })
      after(function() {
        docpreview.unload();
      })
      it('should insert a preview container on the page', function() {
        $('.documentpreview-container').should.exist;
      })
    })

    describe('Document-Specific Style Sheets', function() {
      var widgetData = {
        id: 2,
        latestRevisionId: 3,
        previews: {pageCount: 4},
        signature: {signature: 5, expires: 6, lastModified: 7}
      };
      before(function(done) {
        docpreview.clear()
          .user('basic')
          .mock({method: 'GET', url: '/api/content/2/revisions/3/previews/base.css?signature=5&expires=6&lastmodified=7', response: [200, {'Content-Type': 'text/css'}, '/* mockbase.css */']})
          .mock({method: 'GET', url: '/api/content/2/revisions/3/previews/fancy.css?signature=5&expires=6&lastmodified=7', response: [200, {'Content-Type': 'text/css'}, '/* mockfancy.css */']})
          .mock({method: 'GET', url: '/api/content/2/revisions/3/previews/lines.css?signature=5&expires=6&lastmodified=7', response: [200, {'Content-Type': 'text/css'}, '/* mocklines.css */']})
          .restart()
          .load('widget-container', {}, widgetData);
        setTimeout(function() {done();}, 25)
      })
      after(function() {
        docpreview
          .default()
          .unload();
      })
      it('should include the base.css stylesheet', function() {
        $('style').filter(function() {return this.textContent === '/* mockbase.css */';}).length.should.be(1);
      })
      it('should include the fancy.css stylesheet', function() {
        $('style').filter(function() {return this.textContent === '/* mockfancy.css */';}).length.should.be(1);
      })
      it('should include the lines.css stylesheet', function() {
        $('style').filter(function() {return this.textContent === '/* mocklines.css */';}).length.should.be(1);
      })
    })

  })
})