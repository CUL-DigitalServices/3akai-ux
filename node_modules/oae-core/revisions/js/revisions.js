/*!
 * Copyright 2013 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function($, oae) {

    return function(uid, showSettings) {

        // The widget container
        var $rootel = $('#' + uid);

        // Variable that will be used to keep track of the current infinite scroll instance
        var infinityScroll = false;

        // Caches the content profile data
        var contentProfile = null;

        // Caches the revisions
        var revisions = null;

        /**
         * Resets the widget to its original state
         */
        var reset = function() {
            revisions = null;
            infinityScroll.kill();
            infinityScroll = null;
            contentProfile = null;
        };

        /**
         * Returns the clicked revision data object
         *
         * @return {Object}    The revision data object of the list item that was clicked
         */
        var getClickedRevision = function(ev) {
            // Caches the revision data object that needs to be restored
            var clickedRevision = null;
            // Caches the created timestamp of the revision object that was clicked
            var clickedCreated = $(ev.currentTarget).attr('data-key') || $(ev.currentTarget).parents('li').attr('data-key');

            // Loop over the cached revisions and assign the clicked version object to `clickedRevision`
            $.each(revisions, function(i, revision) {
                if (revision.created === clickedCreated) {
                    clickedRevision = revision;
                    clickedRevision.resourceSubType = contentProfile.resourceSubType;
                    return false;
                }
            });

            // Return the clicked version object
            return clickedRevision;
        };

        /**
         * Renders a preview of the selected revision list item
         *
         * @param  {Object}    ev    Click event object
         */
        var renderPreview = function(ev) {
            var clickedRevision = getClickedRevision(ev);

            // Add the selected class to the list item
            $('.oae-list li', $rootel).removeClass('selected');
            $(ev.currentTarget).addClass('selected');

            // Render the preview for the selected version
            oae.api.util.template().render($('#revisions-preview-template', $rootel), {
                'revision': clickedRevision
            }, $('#revisions-preview', $rootel));
        };

        /**
         * Restore a revision
         *
         * @param  {Object}    ev    Click event object
         */
        var restoreRevision = function(ev) {
            // Caches the revision data object that needs to be restored
            var clickedRevision = getClickedRevision(ev);

            // Restore the revision of the content
            oae.api.content.restoreRevision(contentProfile.id, clickedRevision.revisionId, function(err, data) {
                if (!err) {
                    // Hide the modal
                    $('#revisions-modal', $rootel).modal('hide');

                    // Show a success notification
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__REVISION_RESTORED__', 'revisions'),
                        oae.api.i18n.translate('__MSG__REVISION_RESTORE_SUCCESS__', 'revisions')
                    );

                    // Refresh the content profile
                    $(document).trigger('oae.revisions.done', data);
                } else {
                    // Show a failure notification
                    oae.api.util.notification(
                        oae.api.i18n.translate('__MSG__REVISION_NOT_RESTORED__', 'revisions'),
                        oae.api.i18n.translate('__MSG__REVISION_RESTORE_FAIL__', 'revisions'),
                        'error'
                    );
                }
            });
        };

        /**
         * Initialize a new infinite scroll container that fetches the revisions of a content item.
         */
        var getRevisions = function() {
            // Disable the previous infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }

            var url = '/api/content/' + contentProfile.id + '/revisions';


            // Set up the infinite scroll for the revisions list
            infinityScroll = $('.oae-list', $rootel).infiniteScroll(url, {
                'limit': 8
            }, '#revisions-list-template', {
                'postProcessor': function(data) {
                    revisions = revisions || [];
                    $.merge(revisions, data);
                    return {
                        'results': data
                    };
                },
                'scrollContainer': $('.oae-list', $rootel)
            });
        };

        /**
         * Handles keyboard input on list items
         *
         * @param  {Object}    ev    The list item focus event object
         */
        var handleKeyboardNavigation = function(ev) {
            var $listItem = $(ev.currentTarget);
            // If the down arrow is hit go one revision down and preview it
            if (ev.which === 40) {
                ev.preventDefault();
                if ($listItem.next().length) {
                    $listItem.next().click();
                    $listItem.next().focus();
                }
            // If the down arrow is hit go one revision up and preview it
            } else if (ev.which === 38) {
                ev.preventDefault();
                if ($listItem.prev().length) {
                    $listItem.prev().click();
                    $listItem.prev().focus();
                }
            }
        };

        /**
         * Initializes the revisions modal dialog
         */
        var setUpRevisionsModal = function() {
            // Catch the revision modal trigger
            $(document).on('click', '.oae-trigger-revisions', function() {
                $('#revisions-modal', $rootel).modal();
                $(document).trigger('oae.context.get', 'revisions');
            });

            // Catch the send context event, cache the content profile and retrieve the list revisions
            $(document).on('oae.context.send.revisions', function(ev, data) {
                contentProfile = data;
                getRevisions();
            });

            // Reset the widget when the modal is hidden
            $('#revisions-modal', $rootel).on('hidden', reset);

            // Select the first list item when the modal is shown
            $('#revisions-modal', $rootel).on('shown', function() {
                $('.oae-list li:first-child', $rootel).click();
                $('.oae-list li:first-child', $rootel).focus();
            });

            // Render a preview on click or focus of a list item
            $rootel.on('click', '.oae-list li', renderPreview);

            // Handle focus and keydown events of list items
            $rootel.on('focus', '.oae-list li', function() {
                $(this).on('keydown', handleKeyboardNavigation);
            });

            // Catch the blur event of a list item and detach the keydown handler
            $rootel.on('blur', '.oae-list li', function() {
                $(this).off('keydown');
            });

            // Restore a revision
            $rootel.on('click', '.revisions-list-actions-restore', restoreRevision);
        };

        setUpRevisionsModal();

    };
});
